<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GetcuReone.GetcuReone.FactFactory.Main</name>
    </assembly>
    <members>
        <member name="T:GetcuReone.FactFactory.BaseFact">
            <summary>
            Base class for fact.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFact.GetFactType">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFact.AddParameter(GetcuReone.FactFactory.Interfaces.IFactParameter)">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFact.GetParameter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFact.GetParameters">
            <inheritdoc/>
        </member>
        <member name="T:GetcuReone.FactFactory.BaseFact`1">
            <inheritdoc/>
            <typeparam name="TFactValue">Type fact value.</typeparam>
        </member>
        <member name="P:GetcuReone.FactFactory.BaseFact`1.Value">
            <summary>
            Value fact.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFact`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="value">Fact value.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFact`1.op_Implicit(GetcuReone.FactFactory.BaseFact{`0})~`0">
            <summary>
            Extracts <see cref="P:GetcuReone.FactFactory.BaseFact`1.Value"/>.
            </summary>
            <param name="fact">Fact.</param>
        </member>
        <member name="T:GetcuReone.FactFactory.BaseFactFactory">
            <summary>
            Base class for fact factory.
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.BaseFactFactory.WantFactsInfos">
            <summary>
            WantFacts.
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.BaseFactFactory.Rules">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.GetDefaultFacts(GetcuReone.FactFactory.Interfaces.Context.IWantActionContext)">
            <summary>
            Returns the fact set that will be contained in the default container.
            </summary>
            <param name="context">Context.</param>
            <returns>The set of facts added to the default container</returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.Derive">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.DeriveAsync">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.GetDefaultContainer">
            <summary>
            Returns default container.
            </summary>
            <returns>Default container.</returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.GetTreeBuildingOperations">
            <summary>
            Returns <see cref="T:GetcuReone.FactFactory.Facades.TreeBuildingOperations.TreeBuildingOperationsFacade"/>.
            </summary>
            <returns>Instanse <see cref="T:GetcuReone.FactFactory.Facades.TreeBuildingOperations.TreeBuildingOperationsFacade"/>.</returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.GetSingleEntityOperations">
            <summary>
            Returns <see cref="T:GetcuReone.FactFactory.Facades.SingleEntityOperations.SingleEntityOperationsFacade"/>.
            </summary>
            <returns>Instanse <see cref="T:GetcuReone.FactFactory.Facades.SingleEntityOperations.SingleEntityOperationsFacade"/>.</returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.GetSingleEntityOperationsOnce">
            <summary>
            Calls the <see cref="M:GetcuReone.FactFactory.BaseFactFactory.GetSingleEntityOperationsOnce"/> once.
            </summary>
            <inheritdoc cref="M:GetcuReone.FactFactory.BaseFactFactory.GetSingleEntityOperations"/>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.GetFactTypeCache">
            <summary>
            Returns <see cref="T:GetcuReone.FactFactory.BaseEntities.FactTypeCache"/>.
            </summary>
            <returns>Instanse <see cref="T:GetcuReone.FactFactory.BaseEntities.FactTypeCache"/>.</returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.GetFactEngine">
            <summary>
            Returns <see cref="T:GetcuReone.FactFactory.Facades.FactEngine.FactEngineFacade"/>.
            </summary>
            <returns>Instanse <see cref="T:GetcuReone.FactFactory.Facades.FactEngine.FactEngineFacade"/>.</returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.GetFactParameterCache">
            <summary>
            Returns <see cref="T:GetcuReone.FactFactory.Interfaces.Operations.IFactParameterCache"/>
            </summary>
            <returns>Instanse <see cref="T:GetcuReone.FactFactory.Interfaces.Operations.IFactParameterCache"/>.</returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts(GetcuReone.FactFactory.Interfaces.IWantAction,GetcuReone.FactFactory.Interfaces.IFactContainer)">
            <summary>
            Requesting a desired fact through action.
            </summary>
            <param name="wantAction"></param>
            <param name="container"></param>
            <exception cref="T:GetcuReone.FactFactory.Exceptions.FactFactoryException">The action has already been requested before.</exception>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``1(System.Action{``0},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``2(System.Action{``0,``1},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``3(System.Action{``0,``1,``2},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``4(System.Action{``0,``1,``2,``3},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``5(System.Action{``0,``1,``2,``3,``4},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``6(System.Action{``0,``1,``2,``3,``4,``5},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``7(System.Action{``0,``1,``2,``3,``4,``5,``6},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <typeparam name="TFact11">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <typeparam name="TFact11">Type fact.</typeparam>
            <typeparam name="TFact12">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <typeparam name="TFact11">Type fact.</typeparam>
            <typeparam name="TFact12">Type fact.</typeparam>
            <typeparam name="TFact13">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <typeparam name="TFact11">Type fact.</typeparam>
            <typeparam name="TFact12">Type fact.</typeparam>
            <typeparam name="TFact13">Type fact.</typeparam>
            <typeparam name="TFact14">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <typeparam name="TFact11">Type fact.</typeparam>
            <typeparam name="TFact12">Type fact.</typeparam>
            <typeparam name="TFact13">Type fact.</typeparam>
            <typeparam name="TFact14">Type fact.</typeparam>
            <typeparam name="TFact15">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <typeparam name="TFact11">Type fact.</typeparam>
            <typeparam name="TFact12">Type fact.</typeparam>
            <typeparam name="TFact13">Type fact.</typeparam>
            <typeparam name="TFact14">Type fact.</typeparam>
            <typeparam name="TFact15">Type fact.</typeparam>
            <typeparam name="TFact16">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``1(System.Func{``0,System.Threading.Tasks.ValueTask},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <param name="wantFactActionAsync">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``2(System.Func{``0,``1,System.Threading.Tasks.ValueTask},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <param name="wantFactActionAsync">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``3(System.Func{``0,``1,``2,System.Threading.Tasks.ValueTask},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <param name="wantFactActionAsync">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``4(System.Func{``0,``1,``2,``3,System.Threading.Tasks.ValueTask},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <param name="wantFactActionAsync">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``5(System.Func{``0,``1,``2,``3,``4,System.Threading.Tasks.ValueTask},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <param name="wantFactActionAsync">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``6(System.Func{``0,``1,``2,``3,``4,``5,System.Threading.Tasks.ValueTask},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <param name="wantFactActionAsync">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``7(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Threading.Tasks.ValueTask},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <param name="wantFactActionAsync">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Threading.Tasks.ValueTask},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <param name="wantFactActionAsync">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Threading.Tasks.ValueTask},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <param name="wantFactActionAsync">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Threading.Tasks.ValueTask},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <param name="wantFactActionAsync">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Threading.Tasks.ValueTask},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <typeparam name="TFact11">Type fact.</typeparam>
            <param name="wantFactActionAsync">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Threading.Tasks.ValueTask},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <typeparam name="TFact11">Type fact.</typeparam>
            <typeparam name="TFact12">Type fact.</typeparam>
            <param name="wantFactActionAsync">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Threading.Tasks.ValueTask},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <typeparam name="TFact11">Type fact.</typeparam>
            <typeparam name="TFact12">Type fact.</typeparam>
            <typeparam name="TFact13">Type fact.</typeparam>
            <param name="wantFactActionAsync">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Threading.Tasks.ValueTask},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <typeparam name="TFact11">Type fact.</typeparam>
            <typeparam name="TFact12">Type fact.</typeparam>
            <typeparam name="TFact13">Type fact.</typeparam>
            <typeparam name="TFact14">Type fact.</typeparam>
            <param name="wantFactActionAsync">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Threading.Tasks.ValueTask},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <typeparam name="TFact11">Type fact.</typeparam>
            <typeparam name="TFact12">Type fact.</typeparam>
            <typeparam name="TFact13">Type fact.</typeparam>
            <typeparam name="TFact14">Type fact.</typeparam>
            <typeparam name="TFact15">Type fact.</typeparam>
            <param name="wantFactActionAsync">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseFactFactory.WantFacts``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Threading.Tasks.ValueTask},GetcuReone.FactFactory.Interfaces.IFactContainer,GetcuReone.FactFactory.Interfaces.FactWorkOption)">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <typeparam name="TFact11">Type fact.</typeparam>
            <typeparam name="TFact12">Type fact.</typeparam>
            <typeparam name="TFact13">Type fact.</typeparam>
            <typeparam name="TFact14">Type fact.</typeparam>
            <typeparam name="TFact15">Type fact.</typeparam>
            <typeparam name="TFact16">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
            <param name="container">Fact container.</param>
            <param name="option">FactWork options.</param>
        </member>
        <member name="T:GetcuReone.FactFactory.Extensions.FactFactoryExtensions">
            <summary>
            Extensions methods for <see cref="T:GetcuReone.FactFactory.Interfaces.IFactFactory"/>.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Extensions.FactFactoryExtensions.DeriveFact``1(GetcuReone.FactFactory.Interfaces.IFactFactory,GetcuReone.FactFactory.Interfaces.IFactContainer)">
            <summary>
            Derive <typeparamref name="TFactResult"/>.
            </summary>
            <typeparam name="TFactResult">The type of fact to get.</typeparam>
            <param name="factory">Fact factory.</param>
            <param name="container">Fact container.</param>
            <returns>Requested fact.</returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Extensions.FactFactoryExtensions.DeriveFactAsync``1(GetcuReone.FactFactory.Interfaces.IFactFactory,GetcuReone.FactFactory.Interfaces.IFactContainer)">
            <summary>
            Derive <typeparamref name="TFactResult"/>.
            </summary>
            <typeparam name="TFactResult">The type of fact to get.</typeparam>
            <param name="factory">Fact factory.</param>
            <param name="container">Fact container.</param>
            <returns>Requested fact.</returns>
        </member>
        <member name="T:GetcuReone.FactFactory.FactFactory">
            <summary>
            Factory default implementation.
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.FactFactory.Rules">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactory.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactory.#ctor(System.Func{GetcuReone.FactFactory.Interfaces.Context.IWantActionContext,System.Collections.Generic.IEnumerable{GetcuReone.FactFactory.Interfaces.IFact}})">
            <summary>
            Constructor.
            </summary>
            <param name="getDefaultFactsFunc">Function that returns a list of facts by default.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactory.GetDefaultContainer">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactory.GetDefaultFacts(GetcuReone.FactFactory.Interfaces.Context.IWantActionContext)">
            <inheritdoc/>
        </member>
        <member name="T:GetcuReone.FactFactory.SpecialFacts.BaseSpecialFact">
            <summary>
            Base class for <see cref="T:GetcuReone.FactFactory.Interfaces.SpecialFacts.ISpecialFact"/>.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.SpecialFacts.BaseSpecialFact.EqualsInfo(GetcuReone.FactFactory.Interfaces.SpecialFacts.ISpecialFact)">
            <inheritdoc/>
        </member>
        <member name="T:GetcuReone.FactFactory.SpecialFacts.BuildCondition.BaseBuildConditionFact">
            <summary>
            Base class for <see cref="T:GetcuReone.FactFactory.Interfaces.SpecialFacts.IBuildConditionFact"/>.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.SpecialFacts.BuildCondition.BaseBuildConditionFact.Condition(GetcuReone.FactFactory.Interfaces.IFactWork,GetcuReone.FactFactory.Interfaces.Context.IWantActionContext,System.Func{GetcuReone.FactFactory.Interfaces.Context.IWantActionContext,GetcuReone.FactFactory.Interfaces.IFactRuleCollection})">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.FactFactory.SpecialFacts.BuildCondition.BaseBuildConditionFact.EqualsInfo(GetcuReone.FactFactory.Interfaces.SpecialFacts.ISpecialFact)">
            <inheritdoc/>
        </member>
        <member name="T:GetcuReone.FactFactory.SpecialFacts.BuildCondition.BaseBuildConditionFact`1">
            <inheritdoc/>
            <typeparam name="TFact">The type of fact for which the condition is met.</typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.SpecialFacts.BuildCondition.BaseBuildConditionFact`1.GetFactType``1">
            <inheritdoc/>
        </member>
        <member name="T:GetcuReone.FactFactory.SpecialFacts.BuildCondition.BuildCanDerived`1">
            <summary>
            Fact condition that checks if a tree can be built for the fact <typeparamref name = "TFact" /> at the tree building stage.
            </summary>
            <typeparam name="TFact">The type of fact for which the condition is met.</typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.SpecialFacts.BuildCondition.BuildCanDerived`1.Condition(GetcuReone.FactFactory.Interfaces.IFactWork,GetcuReone.FactFactory.Interfaces.Context.IWantActionContext,System.Func{GetcuReone.FactFactory.Interfaces.Context.IWantActionContext,GetcuReone.FactFactory.Interfaces.IFactRuleCollection})">
            <summary>
            Checks if a tree can be built for the fact.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:GetcuReone.FactFactory.SpecialFacts.BuildCondition.BuildCannotDerived`1">
            <summary>
            A fact condition that tests whether a tree cannot be built for the <typeparamref name="TFact"/> fact at the tree building stage.
            </summary>
            <typeparam name="TFact">The type of fact for which the condition is met.</typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.SpecialFacts.BuildCondition.BuildCannotDerived`1.Condition(GetcuReone.FactFactory.Interfaces.IFactWork,GetcuReone.FactFactory.Interfaces.Context.IWantActionContext,System.Func{GetcuReone.FactFactory.Interfaces.Context.IWantActionContext,GetcuReone.FactFactory.Interfaces.IFactRuleCollection})">
            <summary>
            Checks if a tree cannot be built for the <typeparamref name="TFact"/> fact.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:GetcuReone.FactFactory.SpecialFacts.BuildCondition.BuildContained`1">
            <summary>
            Fact condition. Checks if a <typeparamref name="TFact"/> fact can be retrieved from a container at the tree building stage.
            </summary>
            <typeparam name="TFact">The type of fact for which the condition is met.</typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.SpecialFacts.BuildCondition.BuildContained`1.Condition(GetcuReone.FactFactory.Interfaces.IFactWork,GetcuReone.FactFactory.Interfaces.Context.IWantActionContext,System.Func{GetcuReone.FactFactory.Interfaces.Context.IWantActionContext,GetcuReone.FactFactory.Interfaces.IFactRuleCollection})">
            <summary>
            Checks if a <typeparamref name="TFact"/> fact can be retrieved from a container.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:GetcuReone.FactFactory.SpecialFacts.BuildCondition.BuildNotContained`1">
            <summary>
            Fact condition. Checks if a <typeparamref name="TFact"/> fact cannot be retrieved from a container at the tree building stage.
            </summary>
            <typeparam name="TFact">The type of fact for which the condition is met.</typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.SpecialFacts.BuildCondition.BuildNotContained`1.Condition(GetcuReone.FactFactory.Interfaces.IFactWork,GetcuReone.FactFactory.Interfaces.Context.IWantActionContext,System.Func{GetcuReone.FactFactory.Interfaces.Context.IWantActionContext,GetcuReone.FactFactory.Interfaces.IFactRuleCollection})">
            <summary>
            Checks if a <typeparamref name="TFact"/> fact cannot be retrieved from a container.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:GetcuReone.FactFactory.SpecialFacts.RuntimeCondition.BaseRuntimeConditionFact">
            <summary>
            Base class for <see cref="T:GetcuReone.FactFactory.Interfaces.SpecialFacts.IRuntimeConditionFact"/>.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.SpecialFacts.RuntimeCondition.BaseRuntimeConditionFact.Condition(GetcuReone.FactFactory.Interfaces.IFactWork,GetcuReone.FactFactory.Interfaces.Context.IFactRulesContext)">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.FactFactory.SpecialFacts.RuntimeCondition.BaseRuntimeConditionFact.EqualsInfo(GetcuReone.FactFactory.Interfaces.SpecialFacts.ISpecialFact)">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.FactFactory.SpecialFacts.RuntimeCondition.BaseRuntimeConditionFact.SetGetRelatedRulesFunc(System.Func{GetcuReone.FactFactory.Interfaces.IFactRule,GetcuReone.FactFactory.Interfaces.IFactRuleCollection,GetcuReone.FactFactory.Interfaces.Context.IWantActionContext,GetcuReone.FactFactory.Interfaces.IFactRuleCollection},GetcuReone.FactFactory.Interfaces.IFactRule,GetcuReone.FactFactory.Interfaces.IFactRuleCollection)">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.FactFactory.SpecialFacts.RuntimeCondition.BaseRuntimeConditionFact.TryGetRelatedRules(GetcuReone.FactFactory.Interfaces.Context.IWantActionContext,GetcuReone.FactFactory.Interfaces.IFactRuleCollection@)">
            <inheritdoc/>
        </member>
        <member name="T:GetcuReone.FactFactory.SpecialFacts.RuntimeCondition.BaseRuntimeConditionFact`1">
            <inheritdoc/>
        </member>
        <member name="M:GetcuReone.FactFactory.SpecialFacts.RuntimeCondition.BaseRuntimeConditionFact`1.GetFactType``1">
            <inheritdoc/>
        </member>
        <member name="T:GetcuReone.FactFactory.SpecialFacts.RuntimeCondition.RCanDerived`1">
            <summary>
            Fact condition that checks if a tree can be built for the fact <typeparamref name = "TFact" />.
            </summary>
            <typeparam name="TFact">The type of fact for which the condition is met.</typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.SpecialFacts.RuntimeCondition.RCanDerived`1.Condition(GetcuReone.FactFactory.Interfaces.IFactWork,GetcuReone.FactFactory.Interfaces.Context.IFactRulesContext)">
            <summary>
            Checks if a <typeparamref name="TFact"/> fact can be retrieved from a container.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:GetcuReone.FactFactory.SpecialFacts.RuntimeCondition.RCannotDerived`1">
            <summary>
            Fact condition that checks if a tree can be built for the fact <typeparamref name = "TFact" />.
            </summary>
            <typeparam name="TFact">The type of fact for which the condition is met.</typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.SpecialFacts.RuntimeCondition.RCannotDerived`1.Condition(GetcuReone.FactFactory.Interfaces.IFactWork,GetcuReone.FactFactory.Interfaces.Context.IFactRulesContext)">
            <summary>
            Checks if a <typeparamref name="TFact"/> fact can be retrieved from a container.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:GetcuReone.FactFactory.SpecialFacts.RuntimeCondition.RContained`1">
            <summary>
            Fact condition. Checks if a <typeparamref name="TFact"/> fact can be retrieved from a container.
            </summary>
            <typeparam name="TFact">The type of fact for which the condition is met.</typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.SpecialFacts.RuntimeCondition.RContained`1.Condition(GetcuReone.FactFactory.Interfaces.IFactWork,GetcuReone.FactFactory.Interfaces.Context.IFactRulesContext)">
            <summary>
            Checks if a <typeparamref name="TFact"/> fact can be retrieved from a container.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:GetcuReone.FactFactory.SpecialFacts.RuntimeCondition.RNotContained`1">
            <summary>
            Fact condition. Checks if a <typeparamref name="TFact"/> fact cannot be retrieved from a container.
            </summary>
            <typeparam name="TFact">The type of fact for which the condition is met.</typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.SpecialFacts.RuntimeCondition.RNotContained`1.Condition(GetcuReone.FactFactory.Interfaces.IFactWork,GetcuReone.FactFactory.Interfaces.Context.IFactRulesContext)">
            <summary>
            Checks if a <typeparamref name="TFact"/> fact cannot be retrieved from a container.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:ArrayExtensions.IsNullOrEmpty``1(``0[])">
            <summary>
            True - <paramref name="items"/> is null or empty.
            </summary>
            <typeparam name="TItem">Type items.</typeparam>
            <param name="items">Collection.</param>
            <returns><paramref name="items"/> is empty or null?</returns>
        </member>
        <member name="M:EnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            True - <paramref name="items"/> is null or empty.
            </summary>
            <typeparam name="TItem">Type items.</typeparam>
            <param name="items">Collection.</param>
            <returns><paramref name="items"/> is empty or null?</returns>
        </member>
        <member name="M:ListExtensions.IsNullOrEmpty``1(System.Collections.Generic.List{``0})">
            <summary>
            True - <paramref name="items"/> is null or empty.
            </summary>
            <typeparam name="TItem">Type items.</typeparam>
            <param name="items">Collection.</param>
            <returns><paramref name="items"/> is empty or null?</returns>
        </member>
    </members>
</doc>
