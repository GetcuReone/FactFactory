<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FactFactory</name>
    </assembly>
    <members>
        <member name="T:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1">
            <summary>
            Base class for fact container.
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1.ContainerList">
            <summary>
            List storing facts.
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:GetcuReone.FactFactory.Interfaces.IFactContainer`1"/> is read-only.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="facts">An array of facts to add to the container.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="facts">An array of facts to add to the container.</param>
            <param name="isReadOnly"></param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1.CheckReadOnly">
            <summary>
            If <see cref="P:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1.IsReadOnly"/> is true then throw <see cref="T:GetcuReone.FactFactory.Exceptions.FactFactoryException"/>.
            </summary>
            <exception cref="T:GetcuReone.FactFactory.Exceptions.FactFactoryException">If <see cref="P:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1.IsReadOnly"/> is true.</exception>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1.GetFactType``1">
            <summary>
            Return fact type information.
            </summary>
            <typeparam name="TGetFact">The type of fact to return information about.</typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1.Add``1(``0)">
            <summary>
            Add fact.
            </summary>
            <param name="fact">Fact.</param>
            <typeparam name="TFact">Type of fact to add.</typeparam>
            <exception cref="T:GetcuReone.FactFactory.Exceptions.FactFactoryException">Attempt to add an existing fact.</exception>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1.Contains``1">
            <summary>
            Is this type of fact contained.
            </summary>
            <typeparam name="TFact">type of fact to check for.</typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1"/>.
            </summary>
            <returns>A <see cref="T:System.Collections.IEnumerator"/> for the <see cref="T:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1"/></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1.GetFact``1">
            <summary>
            Get fact.
            </summary>
            <typeparam name="TFact">Type of fact to return.</typeparam>
            <exception cref="T:GetcuReone.FactFactory.Exceptions.FactFactoryException">Did not find fact type <typeparamref name="TFact"/></exception>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1.Remove``1">
            <summary>
            Remove fact.
            </summary>
            <typeparam name="TFact">Type of fact to delete.</typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1.Remove``1(``0)">
            <summary>
            Remove fact.
            </summary>
            <param name="fact"></param>
            <typeparam name="TFact">Type of fact to delete.</typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1.TryGetFact``1(``0@)">
            <summary>
            Try get fact.
            </summary>
            <typeparam name="TFact">Type of fact to return.</typeparam>
            <param name="fact"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1.Copy">
            <summary>
            Get copy container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactContainerBase`1.Clear">
            <summary>
            Clear this container.
            </summary>
        </member>
        <member name="T:GetcuReone.FactFactory.BaseEntities.FactRuleBase`1">
            <summary>
            Base class for rules.
            </summary>
            <typeparam name="TFactBase">The type of fact from which the facts in the container should be inherited</typeparam>
        </member>
        <member name="P:GetcuReone.FactFactory.BaseEntities.FactRuleBase`1.InputFactTypes">
            <summary>
            Information on input factacles rules.
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.BaseEntities.FactRuleBase`1.OutputFactType">
            <summary>
            Information on output fact.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleBase`1.#ctor(System.Func{GetcuReone.FactFactory.Interfaces.IFactContainer{`0},GetcuReone.FactFactory.Interfaces.IWantAction{`0},`0},System.Collections.Generic.List{GetcuReone.FactFactory.Interfaces.IFactType},GetcuReone.FactFactory.Interfaces.IFactType)">
            <summary>
            Constructor.
            </summary>
            <param name="func">Func for calculate.</param>
            <param name="inputFactTypes">Information on input factacles rules.</param>
            <param name="outputFactType">Information on output fact.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> or <paramref name="outputFactType"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The fact is requested at the input, which the rule calculates.</exception>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleBase`1.CompareFactTypes(System.Collections.Generic.IEnumerable{GetcuReone.FactFactory.Interfaces.IFactType},System.Collections.Generic.IEnumerable{GetcuReone.FactFactory.Interfaces.IFactType})">
            <summary>
            Fact type set comparison
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleBase`1.Calculate``2(``0,``1)">
            <summary>
            Rule of fact calculate.
            </summary>
            <param name="container"></param>
            <param name="wantAction"></param>
            <typeparam name="TContainer"></typeparam>
            <typeparam name="TWantAction"></typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleBase`1.CanCalculate``2(``0,``1)">
            <summary>
            Is it possible to calculate the fact.
            </summary>
            <param name="container"></param>
            <param name="wantAction"></param>
            <typeparam name="TContainer"></typeparam>
            <typeparam name="TWantAction"></typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleBase`1.Compare``1(``0)">
            <summary>
            Compare rules.
            </summary>
            <typeparam name="TFactRule"></typeparam>
            <param name="factRule"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleBase`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleBase`1.IsMorePriorityThan``2(``0,``1)">
            <summary>
            True, the current object is more priority than <paramref name="workFact"/>.
            </summary>
            <typeparam name="TWorkFact"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="workFact"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleBase`1.IsLessPriorityThan``2(``0,``1)">
            <summary>
            True, the current object is less priority than <paramref name="workFact"/>.
            </summary>
            <typeparam name="TWorkFact"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="workFact"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleBase`1.GetNecessaryFactTypes``2(``0,``1)">
            <summary>
            Get the necessary fact types.
            </summary>
            <typeparam name="TWantAction"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="wantAction"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2">
            <summary>
            Base collection for <typeparamref name="TFactRule"/>.
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Item(System.Int32)">
            <summary>
            Gets or sets the rule at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.List`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.List`1"/> is read-only.</exception>
            <returns>The rule at the specified index</returns>
        </member>
        <member name="P:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Count">
            <summary>
            Gets the number of rules contained in the <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/>.
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/> is read-only.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.#ctor(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Constructor.
            </summary>
            <param name="factRules"></param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.#ctor(System.Collections.Generic.IEnumerable{`1},System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="factRules"></param>
            <param name="isReadOnly"></param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.GetFactType``1">
            <summary>
            Return <see cref="T:GetcuReone.FactFactory.Interfaces.IFactType"/>.
            </summary>
            <typeparam name="TGetFact"></typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.CreateFactRule(System.Func{GetcuReone.FactFactory.Interfaces.IFactContainer{`0},GetcuReone.FactFactory.Interfaces.IWantAction{`0},`0},System.Collections.Generic.List{GetcuReone.FactFactory.Interfaces.IFactType},GetcuReone.FactFactory.Interfaces.IFactType)">
            <summary>
            Creation method <typeparamref name="TFactRule"/>.
            </summary>
            <param name="func">func for calculate.</param>
            <param name="inputFactTypes">information on input factacles rules.</param>
            <param name="outputFactType">information on output fact.</param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.GetCorrectFact``1(GetcuReone.FactFactory.Interfaces.IFactContainer{`0},GetcuReone.FactFactory.Interfaces.IWantAction{`0})">
            <summary>
            Return the correct fact.
            </summary>
            <typeparam name="TFact"></typeparam>
            <param name="container"></param>
            <param name="wantAction"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Add(`1)">
            <summary>
            Add rule.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Add``1(System.Func{``0})">
            <summary>
            Add a rule without input facts.
            </summary>
            <typeparam name="TFactResult">Type of fact result.</typeparam>
            <param name="rule">Rule of fact calculation.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Add``2(System.Func{``0,``1})">
            <summary>
            Add a rule with 1 input facts.
            </summary>
            <typeparam name="TFactIn1">Type 1 input fact.</typeparam>
            <typeparam name="TFactOut">Type output fact.</typeparam>
            <param name="rule">Rule of fact calculation.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Add``3(System.Func{``0,``1,``2})">
            <summary>
            Add a rule with 2 input facts.
            </summary>
            <typeparam name="TFactIn1">Type 1 input fact.</typeparam>
            <typeparam name="TFactIn2">Type 2 input fact.</typeparam>
            <typeparam name="TFactOut">Type output fact.</typeparam>
            <param name="rule">Rule of fact calculation.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Add``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Add a rule with 3 input facts.
            </summary>
            <typeparam name="TFactIn1">Type 1 input fact.</typeparam>
            <typeparam name="TFactIn2">Type 2 input fact.</typeparam>
            <typeparam name="TFactIn3">Type 3 input fact.</typeparam>
            <typeparam name="TFactOut">Type output fact.</typeparam>
            <param name="rule">Rule of fact calculation.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Add``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Add a rule with 4 input facts.
            </summary>
            <typeparam name="TFactIn1">Type 1 input fact.</typeparam>
            <typeparam name="TFactIn2">Type 2 input fact.</typeparam>
            <typeparam name="TFactIn3">Type 3 input fact.</typeparam>
            <typeparam name="TFactIn4">Type 4 input fact.</typeparam>
            <typeparam name="TFactOut">Type output fact.</typeparam>
            <param name="rule">Rule of fact calculation.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Add``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Add a rule with 5 input facts.
            </summary>
            <typeparam name="TFactIn1">Type 1 input fact.</typeparam>
            <typeparam name="TFactIn2">Type 2 input fact.</typeparam>
            <typeparam name="TFactIn3">Type 3 input fact.</typeparam>
            <typeparam name="TFactIn4">Type 4 input fact.</typeparam>
            <typeparam name="TFactIn5">Type 5 input fact.</typeparam>
            <typeparam name="TFactOut">Type output fact.</typeparam>
            <param name="rule">Rule of fact calculation..</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Add``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Add a rule with 6 input facts
            </summary>
            <typeparam name="TFactIn1">Type 1 input fact.</typeparam>
            <typeparam name="TFactIn2">Type 2 input fact.</typeparam>
            <typeparam name="TFactIn3">Type 3 input fact.</typeparam>
            <typeparam name="TFactIn4">Type 4 input fact.</typeparam>
            <typeparam name="TFactIn5">Type 5 input fact.</typeparam>
            <typeparam name="TFactIn6">Type 6 input fact.</typeparam>
            <typeparam name="TFactOut">Type output fact.</typeparam>
            <param name="rule">Rule of fact calculation.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Add``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Add a rule with 7 input facts
            </summary>
            <typeparam name="TFactIn1">Type 1 input fact.</typeparam>
            <typeparam name="TFactIn2">Type 2 input fact.</typeparam>
            <typeparam name="TFactIn3">Type 3 input fact.</typeparam>
            <typeparam name="TFactIn4">Type 4 input fact.</typeparam>
            <typeparam name="TFactIn5">Type 5 input fact.</typeparam>
            <typeparam name="TFactIn6">Type 6 input fact.</typeparam>
            <typeparam name="TFactIn7">Type 7 input fact.</typeparam>
            <typeparam name="TFactOut">Type output fact.</typeparam>
            <param name="rule">Rule of fact calculation.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Add``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Add a rule with 8 input facts
            </summary>
            <typeparam name="TFactIn1">Type 1 input fact.</typeparam>
            <typeparam name="TFactIn2">Type 2 input fact.</typeparam>
            <typeparam name="TFactIn3">Type 3 input fact.</typeparam>
            <typeparam name="TFactIn4">Type 4 input fact.</typeparam>
            <typeparam name="TFactIn5">Type 5 input fact.</typeparam>
            <typeparam name="TFactIn6">Type 6 input fact.</typeparam>
            <typeparam name="TFactIn7">Type 7 input fact.</typeparam>
            <typeparam name="TFactIn8">Type 8 input fact.</typeparam>
            <typeparam name="TFactOut">Type output fact.</typeparam>
            <param name="rule">Rule of fact calculation.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Add``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Add a rule with 9 input facts
            </summary>
            <typeparam name="TFactIn1">Type 1 input fact.</typeparam>
            <typeparam name="TFactIn2">Type 2 input fact.</typeparam>
            <typeparam name="TFactIn3">Type 3 input fact.</typeparam>
            <typeparam name="TFactIn4">Type 4 input fact.</typeparam>
            <typeparam name="TFactIn5">Type 5 input fact.</typeparam>
            <typeparam name="TFactIn6">Type 6 input fact.</typeparam>
            <typeparam name="TFactIn7">Type 7 input fact.</typeparam>
            <typeparam name="TFactIn8">Type 8 input fact.</typeparam>
            <typeparam name="TFactIn9">Type 9 input fact.</typeparam>
            <typeparam name="TFactOut">Type output fact.</typeparam>
            <param name="rule">Rule of fact calculation.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Add``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Add a rule with 10 input facts
            </summary>
            <typeparam name="TFactIn1">Type 1 input fact.</typeparam>
            <typeparam name="TFactIn2">Type 2 input fact.</typeparam>
            <typeparam name="TFactIn3">Type 3 input fact.</typeparam>
            <typeparam name="TFactIn4">Type 4 input fact.</typeparam>
            <typeparam name="TFactIn5">Type 5 input fact.</typeparam>
            <typeparam name="TFactIn6">Type 6 input fact.</typeparam>
            <typeparam name="TFactIn7">Type 7 input fact.</typeparam>
            <typeparam name="TFactIn8">Type 8 input fact.</typeparam>
            <typeparam name="TFactIn9">Type 9 input fact.</typeparam>
            <typeparam name="TFactIn10">Type 10 input fact.</typeparam>
            <typeparam name="TFactOut">Type output fact.</typeparam>
            <param name="rule">Rule of fact calculation.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Add``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Add a rule with 11 input facts
            </summary>
            <typeparam name="TFactIn1">Type 1 input fact.</typeparam>
            <typeparam name="TFactIn2">Type 2 input fact.</typeparam>
            <typeparam name="TFactIn3">Type 3 input fact.</typeparam>
            <typeparam name="TFactIn4">Type 4 input fact.</typeparam>
            <typeparam name="TFactIn5">Type 5 input fact.</typeparam>
            <typeparam name="TFactIn6">Type 6 input fact.</typeparam>
            <typeparam name="TFactIn7">Type 7 input fact.</typeparam>
            <typeparam name="TFactIn8">Type 8 input fact.</typeparam>
            <typeparam name="TFactIn9">Type 9 input fact.</typeparam>
            <typeparam name="TFactIn10">Type 10 input fact.</typeparam>
            <typeparam name="TFactIn11">Type 11 input fact.</typeparam>
            <typeparam name="TFactOut">Type output fact.</typeparam>
            <param name="rule">Rule of fact calculation.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Add``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Add a rule with 12 input facts
            </summary>
            <typeparam name="TFactIn1">Type 1 input fact.</typeparam>
            <typeparam name="TFactIn2">Type 2 input fact.</typeparam>
            <typeparam name="TFactIn3">Type 3 input fact.</typeparam>
            <typeparam name="TFactIn4">Type 4 input fact.</typeparam>
            <typeparam name="TFactIn5">Type 5 input fact.</typeparam>
            <typeparam name="TFactIn6">Type 6 input fact.</typeparam>
            <typeparam name="TFactIn7">Type 7 input fact.</typeparam>
            <typeparam name="TFactIn8">Type 8 input fact.</typeparam>
            <typeparam name="TFactIn9">Type 9 input fact.</typeparam>
            <typeparam name="TFactIn10">Type 10 input fact.</typeparam>
            <typeparam name="TFactIn11">Type 11 input fact.</typeparam>
            <typeparam name="TFactIn12">Type 12 input fact.</typeparam>
            <typeparam name="TFactOut">Type output fact.</typeparam>
            <param name="rule">Rule of fact calculation.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Add``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Add a rule with 13 input facts
            </summary>
            <typeparam name="TFactIn1">Type 1 input fact.</typeparam>
            <typeparam name="TFactIn2">Type 2 input fact.</typeparam>
            <typeparam name="TFactIn3">Type 3 input fact.</typeparam>
            <typeparam name="TFactIn4">Type 4 input fact.</typeparam>
            <typeparam name="TFactIn5">Type 5 input fact.</typeparam>
            <typeparam name="TFactIn6">Type 6 input fact.</typeparam>
            <typeparam name="TFactIn7">Type 7 input fact.</typeparam>
            <typeparam name="TFactIn8">Type 8 input fact.</typeparam>
            <typeparam name="TFactIn9">Type 9 input fact.</typeparam>
            <typeparam name="TFactIn10">Type 10 input fact.</typeparam>
            <typeparam name="TFactIn11">Type 11 input fact.</typeparam>
            <typeparam name="TFactIn12">Type 12 input fact.</typeparam>
            <typeparam name="TFactIn13">Type 13 input fact.</typeparam>
            <typeparam name="TFactOut">Type output fact.</typeparam>
            <param name="rule">Rule of fact calculation.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Add``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Add a rule with 14 input facts
            </summary>
            <typeparam name="TFactIn1">Type 1 input fact.</typeparam>
            <typeparam name="TFactIn2">Type 2 input fact.</typeparam>
            <typeparam name="TFactIn3">Type 3 input fact.</typeparam>
            <typeparam name="TFactIn4">Type 4 input fact.</typeparam>
            <typeparam name="TFactIn5">Type 5 input fact.</typeparam>
            <typeparam name="TFactIn6">Type 6 input fact.</typeparam>
            <typeparam name="TFactIn7">Type 7 input fact.</typeparam>
            <typeparam name="TFactIn8">Type 8 input fact.</typeparam>
            <typeparam name="TFactIn9">Type 9 input fact.</typeparam>
            <typeparam name="TFactIn10">Type 10 input fact.</typeparam>
            <typeparam name="TFactIn11">Type 11 input fact.</typeparam>
            <typeparam name="TFactIn12">Type 12 input fact.</typeparam>
            <typeparam name="TFactIn13">Type 13 input fact.</typeparam>
            <typeparam name="TFactIn14">Type 14 input fact.</typeparam>
            <typeparam name="TFactOut">Type output fact.</typeparam>
            <param name="rule">Rule of fact calculation.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Add``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Add a rule with 15 input facts
            </summary>
            <typeparam name="TFactIn1">Type 1 input fact.</typeparam>
            <typeparam name="TFactIn2">Type 2 input fact.</typeparam>
            <typeparam name="TFactIn3">Type 3 input fact.</typeparam>
            <typeparam name="TFactIn4">Type 4 input fact.</typeparam>
            <typeparam name="TFactIn5">Type 5 input fact.</typeparam>
            <typeparam name="TFactIn6">Type 6 input fact.</typeparam>
            <typeparam name="TFactIn7">Type 7 input fact.</typeparam>
            <typeparam name="TFactIn8">Type 8 input fact.</typeparam>
            <typeparam name="TFactIn9">Type 9 input fact.</typeparam>
            <typeparam name="TFactIn10">Type 10 input fact.</typeparam>
            <typeparam name="TFactIn11">Type 11 input fact.</typeparam>
            <typeparam name="TFactIn12">Type 12 input fact.</typeparam>
            <typeparam name="TFactIn13">Type 13 input fact.</typeparam>
            <typeparam name="TFactIn14">Type 14 input fact.</typeparam>
            <typeparam name="TFactIn15">Type 15 input fact.</typeparam>
            <typeparam name="TFactOut">Type output fact.</typeparam>
            <param name="rule">Rule of fact calculation.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Add``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Add a rule with 16 input facts
            </summary>
            <typeparam name="TFactIn1">Type 1 input fact.</typeparam>
            <typeparam name="TFactIn2">Type 2 input fact.</typeparam>
            <typeparam name="TFactIn3">Type 3 input fact.</typeparam>
            <typeparam name="TFactIn4">Type 4 input fact.</typeparam>
            <typeparam name="TFactIn5">Type 5 input fact.</typeparam>
            <typeparam name="TFactIn6">Type 6 input fact.</typeparam>
            <typeparam name="TFactIn7">Type 7 input fact.</typeparam>
            <typeparam name="TFactIn8">Type 8 input fact.</typeparam>
            <typeparam name="TFactIn9">Type 9 input fact.</typeparam>
            <typeparam name="TFactIn10">Type 10 input fact.</typeparam>
            <typeparam name="TFactIn11">Type 11 input fact.</typeparam>
            <typeparam name="TFactIn12">Type 12 input fact.</typeparam>
            <typeparam name="TFactIn13">Type 13 input fact.</typeparam>
            <typeparam name="TFactIn14">Type 14 input fact.</typeparam>
            <typeparam name="TFactIn15">Type 15 input fact.</typeparam>
            <typeparam name="TFactIn16">Type 16 input fact.</typeparam>
            <typeparam name="TFactOut">Type output fact.</typeparam>
            <param name="rule">Rule of fact calculation.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.AddRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/>
            </summary>
            <param name="rules">The collection whose elements should be added to the end of the  <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/>. 
            The collection itself cannot be null, but it can contain elements that are null,
            if type T is a reference type.</param>
            <exception cref="T:System.ArgumentNullException">collection is null</exception>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Clear">
            <summary>
            Removes all elements from the <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/>
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Contains(`1)">
            <summary>
            Determines whether an element is in the <typeparamref name="TFactRule"/>. Use method <see cref="M:GetcuReone.FactFactory.Interfaces.IFactRule`1.Compare``1(``0)"/>.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/> to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/>. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/> is greater than the available space from arrayIndex to the end of the destination array.</exception>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/>.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/>.</returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.IndexOf(`1)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/> be null for reference types. The value can</param>
            <returns>The zero-based index of the first occurrence of item within the entire <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/>, if found; otherwise, –1.</returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Insert(System.Int32,`1)">
            <summary>
            Inserts an element into the<see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0. -or- index is greater than <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/>.</exception>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Remove(`1)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/>. The value can be null for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/>.</returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0. -or- index is equal to or greater than <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/>.</exception>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2.Copy">
            <summary>
            <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/> copy method.
            </summary>
            <returns>Copied <see cref="T:GetcuReone.FactFactory.BaseEntities.FactRuleCollectionBase`2"/>.</returns>
        </member>
        <member name="T:GetcuReone.FactFactory.BaseEntities.FactTypeBase`1">
            <summary>
            Contains fact type information.
            </summary>
            <typeparam name="TFact"></typeparam>
        </member>
        <member name="P:GetcuReone.FactFactory.BaseEntities.FactTypeBase`1.FactName">
            <summary>
            Fact name
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactTypeBase`1.Compare``1(``0)">
            <summary>
            Compare <see cref="T:GetcuReone.FactFactory.Interfaces.IFactType"/>
            </summary>
            <param name="factInfo"></param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactTypeBase`1.CreateSpecialFact``1">
            <summary>
            Create an fact of this type. Method created for special facts.
            </summary>
            <typeparam name="TFactResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactTypeBase`1.IsFactType``1">
            <summary>
            Is it possible to convert a fact type to a <typeparamref name="TFact"/>
            </summary>
            <typeparam name="TFact1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.FactTypeBase`1.TryGetFact``1(System.Collections.Generic.IEnumerable{``0},``0@)">
            <summary>
            Try to get a fact from the container.
            </summary>
            <typeparam name="TFact1">Type base class for facts.</typeparam>
            <param name="facts">Set fact.</param>
            <param name="fact">Fact.</param>
            <returns>True - fact found.</returns>
            <exception cref="T:System.InvalidOperationException">There are more than one type of inheriting <typeparamref name="TFact"/> type.</exception>
        </member>
        <member name="T:GetcuReone.FactFactory.BaseEntities.WantActionBase`1">
            <summary>
            Base class for <see cref="T:GetcuReone.FactFactory.Interfaces.IWantAction`1"/>.
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.BaseEntities.WantActionBase`1.InputFactTypes">
            <summary>
            Facts required to launch an action.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.WantActionBase`1.#ctor(System.Action{GetcuReone.FactFactory.Interfaces.IFactContainer{`0}},System.Collections.Generic.IReadOnlyCollection{GetcuReone.FactFactory.Interfaces.IFactType})">
            <summary>
            Constructor.
            </summary>
            <param name="wantAction">Action taken after deriving a fact.</param>
            <param name="factTypes">Facts required to launch an action.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.WantActionBase`1.Invoke``1(``0)">
            <summary>
            Run action.
            </summary>
            <typeparam name="TFactContainer">container with <see cref="P:GetcuReone.FactFactory.BaseEntities.WantActionBase`1.InputFactTypes"/>.</typeparam>
            <param name="container"></param>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.WantActionBase`1.ToString">
            <summary>
            String representation of an object
            </summary>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.WantActionBase`1.IsMorePriorityThan``2(``0,``1)">
            <summary>
            True, the current object is more priority than <paramref name="workFact"/>.
            </summary>
            <typeparam name="TWorkFact"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="workFact"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.WantActionBase`1.IsLessPriorityThan``2(``0,``1)">
            <summary>
            True, the current object is less priority than <paramref name="workFact"/>.
            </summary>
            <typeparam name="TWorkFact"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="workFact"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.BaseEntities.WantActionBase`1.GetNecessaryFactTypes``1(``0)">
            <summary>
            Get the necessary fact types.
            </summary>
            <typeparam name="TFactContainer"></typeparam>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.FactFactory.Constants.ErrorCode">
            <summary>
            Error codes
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.Constants.ErrorCode.InvalidData">
            <summary>
            Invalid data
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.Constants.ErrorCode.FactCannotCalculated">
            <summary>
            Fact cannot be calculated
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.Constants.ErrorCode.EmptyRuleCollection">
            <summary>
            Collection of rules for calculating the fact is empty
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.Constants.ErrorCode.RuleNotFound">
            <summary>
            Rule not found
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.Constants.ErrorCode.InvalidFactType">
            <summary>
            The fact is of the invalid type
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.Constants.ErrorCode.InvalidOperation">
            <summary>
            Invalid operation
            </summary>
        </member>
        <member name="T:GetcuReone.FactFactory.Exceptions.Entities.DeriveErrorDetail`1">
            <summary>
            Detailed information about the calculation error action
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.Exceptions.Entities.DeriveErrorDetail`1.RequiredAction">
            <summary>
            Action for which it was not possible to derive the facts.
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.Exceptions.Entities.DeriveErrorDetail`1.RequiredFacts">
            <summary>
            The facts that tried to derive.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Exceptions.Entities.DeriveErrorDetail`1.#ctor(System.String,System.String,GetcuReone.FactFactory.Interfaces.IWantAction{`0},System.Collections.Generic.IReadOnlyCollection{GetcuReone.FactFactory.Exceptions.Entities.DeriveFactErrorDetail})">
            <summary>
            Constructor.
            </summary>
            <param name="code">Error code.</param>
            <param name="reason">Error reason.</param>
            <param name="requiredAction">Action for which it was not possible to derive the facts.</param>
            <param name="requiredFacts">The facts that tried to derive.</param>
        </member>
        <member name="T:GetcuReone.FactFactory.Exceptions.Entities.DeriveFactErrorDetail">
            <summary>
            Detailed fact calculation error information
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Exceptions.Entities.DeriveFactErrorDetail.#ctor(GetcuReone.FactFactory.Interfaces.IFactType,System.Collections.Generic.IReadOnlyCollection{GetcuReone.FactFactory.Interfaces.IFactType})">
            <summary>
            Contsructor.
            </summary>
            <param name="requiredFact">The fact that tried to derive.</param>
            <param name="needFacts">Facts that were not enough to derive.</param>
        </member>
        <member name="P:GetcuReone.FactFactory.Exceptions.Entities.DeriveFactErrorDetail.RequiredFact">
            <summary>
            The fact that tried to derive.
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.Exceptions.Entities.DeriveFactErrorDetail.NeedFacts">
            <summary>
            Facts that were not enough to derive.
            </summary>
        </member>
        <member name="T:GetcuReone.FactFactory.Exceptions.Entities.ErrorDetail">
            <summary>
            Error detail
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Exceptions.Entities.ErrorDetail.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="code">Error code.</param>
            <param name="reason">Error reason.</param>
        </member>
        <member name="P:GetcuReone.FactFactory.Exceptions.Entities.ErrorDetail.Code">
            <summary>
            Error code.
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.Exceptions.Entities.ErrorDetail.Reason">
            <summary>
            Error reason.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Exceptions.Entities.ErrorDetail.ToString">
            <summary>
            String representation of an object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.FactFactory.Exceptions.FactFactoryException">
            <summary>
            Base error for FactFactory
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Exceptions.FactFactoryException.#ctor(System.Collections.Generic.IReadOnlyCollection{GetcuReone.FactFactory.Exceptions.Entities.ErrorDetail})">
            <summary>
            Constructor
            </summary>
            <param name="details"></param>
        </member>
        <member name="T:GetcuReone.FactFactory.Exceptions.FactFactoryExceptionBase`1">
            <summary>
            Base error for FactFactory
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Exceptions.FactFactoryExceptionBase`1.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Constructor
            </summary>
            <param name="details"></param>
        </member>
        <member name="P:GetcuReone.FactFactory.Exceptions.FactFactoryExceptionBase`1.Details">
            <summary>
            More info exception
            </summary>
        </member>
        <member name="T:GetcuReone.FactFactory.Exceptions.InvalidDeriveOperationException`1">
            <summary>
            <see cref="T:GetcuReone.FactFactory.Exceptions.FactFactoryException"/> for method <see cref="M:GetcuReone.FactFactory.FactFactoryBase`5.Derive"/>
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Exceptions.InvalidDeriveOperationException`1.#ctor(System.Collections.Generic.IReadOnlyCollection{GetcuReone.FactFactory.Exceptions.Entities.DeriveErrorDetail{`0}})">
            <summary>
            Constructor.
            </summary>
            <param name="details"></param>
        </member>
        <member name="T:GetcuReone.FactFactory.FactFactoryBase`5">
            <summary>
            Base class for fact factory
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.FactFactoryBase`5.WantActions">
            <summary>
            Want actions
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.FactFactoryBase`5.Container">
            <summary>
            Fact container
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.FactFactoryBase`5.Rules">
            <summary>
            Collection of rules for derive facts
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.GetFactType``1">
            <summary>
            Get fact type
            </summary>
            <typeparam name="TGetFact"></typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.GetDefaultFacts(`1)">
            <summary>
            Return the fact set that will be contained in the default container.
            </summary>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.Derive">
            <summary>
            Derive the facts
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.DeriveFact``1">
            <summary>
            Derive <typeparamref name="TFact"/>
            </summary>
            <typeparam name="TFact">Type of desired fact</typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.ValidateContainer">
            <summary>
            Validation container.
            </summary>
            <returns>Copy <see cref="P:GetcuReone.FactFactory.FactFactoryBase`5.Container"/></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.ValidateRules">
            <summary>
            Valudate <see cref="P:GetcuReone.FactFactory.FactFactoryBase`5.Rules"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.OnWantActionCalculated(`4,`1)">
            <summary>
            Action calculation completion handler
            </summary>
            <param name="wantAction"></param>
            <param name="container"></param>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.OnFactCalculatedForWantAction(GetcuReone.FactFactory.Interfaces.IFactType,`1,`4)">
            <summary>
            Fact calculation event handler for an <paramref name="wantAction"/>.
            </summary>
            <param name="factType">Type calculated fact.</param>
            <param name="container">Container.</param>
            <param name="wantAction">The action for which the fact was calculated.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.OnDeriveFinished(System.Collections.Generic.List{`4},`1)">
            <summary>
            Event handler method 'derive finished'. It is executed at the end of the <see cref="M:GetcuReone.FactFactory.FactFactoryBase`5.Derive"/> method.
            </summary>
            <param name="wantActions">List of desired actions.</param>
            <param name="container">Container.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.CreateWantAction(System.Action{GetcuReone.FactFactory.Interfaces.IFactContainer{`0}},System.Collections.Generic.IReadOnlyCollection{GetcuReone.FactFactory.Interfaces.IFactType})">
            <summary>
            creation method <typeparamref name="TWantAction"/>
            </summary>
            <param name="wantAction">action taken after deriving a fact</param>
            <param name="factTypes">facts required to launch an action</param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.GetRulesForWantAction(`4,`1,`3)">
            <summary>
            Return a list with the appropriate rules at the time of the derive of the facts.
            </summary>
            <param name="rules">Current set of rules.</param>
            <param name="container">Current fact set.</param>
            <param name="wantAction">Current wantAction</param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.NeedRecalculateFact(`2,`1,`4,`0@)">
            <summary>
            The method determines whether the fact should be recounted.
            </summary>
            <param name="rule">Rule for calculating the fact.</param>
            <param name="container">Fact container.</param>
            <param name="wantAction">The initial action for which the parameters are calculated.</param>
            <param name="needRemoveFact">If the method returns the true, then this fact will be removed from the container. There will be no deletion if the fact is empty.</param>
            <returns>True - fact needs to be recalculated.</returns>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.TryDeriveTreesForWantAction(System.Collections.Generic.List{GetcuReone.FactFactory.InnerEntities.FactRuleTree{`0,`2}}@,`4,`1,`3,System.Collections.Generic.List{`0}@,GetcuReone.FactFactory.Exceptions.Entities.DeriveErrorDetail{`0}@)">
            <summary>
            We are trying to calculate a tree by which we find a fact
            </summary>
            <param name="treesResult">found trees</param>
            <param name="wantAction">desired action information</param>
            <param name="container">fact container</param>
            <param name="rules">rule collection</param>
            <param name="deriveErrorDetail"></param>
            <param name="specialFacts"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.GetFactRuleTrees(GetcuReone.FactFactory.Interfaces.IFactType,System.Collections.Generic.IList{`2})">
            <summary>
            Returns trees. Their number is equal to the number of rules that can derive the necessary <paramref name="wantFact"/>.
            </summary>
            <param name="wantFact">derive fact</param>
            <param name="rules">rule set</param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.SyncComputedNodeForLevelTreeAndCheckGoneRoot(GetcuReone.FactFactory.InnerEntities.FactRuleTree{`0,`2},System.Int32,System.Collections.Generic.List{GetcuReone.FactFactory.InnerEntities.FactRuleNode{`0,`2}})">
            <summary>
            Synchronizes the level of nodes. Searches for finished nodes and removes them from the level. 
            Returns the truth if, invoking itself, the method has passed the root of the tree
            </summary>
            <param name="factRuleTree"></param>
            <param name="level"></param>
            <param name="computedNodes"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.GetCorrectFact``1(GetcuReone.FactFactory.Interfaces.IFactContainer{`0},System.Collections.Generic.IReadOnlyCollection{GetcuReone.FactFactory.Interfaces.IFactType})">
            <summary>
            Return the correct fact.
            </summary>
            <typeparam name="TFact"></typeparam>
            <param name="container"></param>
            <param name="inputFactTypes"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.WantFact(`4)">
            <summary>
            Requesting a desired fact through action.
            </summary>
            <param name="wantAction"></param>
            <exception cref="T:GetcuReone.FactFactory.Exceptions.FactFactoryException">The action has already been requested before. Or facts requested <see cref="T:GetcuReone.FactFactory.Interfaces.INoDerivedFact"/> or <see cref="T:GetcuReone.FactFactory.Interfaces.INotContainedFact"/></exception>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.WantFact``1(System.Action{``0})">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.WantFact``2(System.Action{``0,``1})">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.WantFact``3(System.Action{``0,``1,``2})">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.WantFact``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.WantFact``5(System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.WantFact``6(System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.WantFact``7(System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.WantFact``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.WantFact``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.WantFact``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.WantFact``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <typeparam name="TFact11">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.WantFact``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <typeparam name="TFact11">Type fact.</typeparam>
            <typeparam name="TFact12">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.WantFact``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <typeparam name="TFact11">Type fact.</typeparam>
            <typeparam name="TFact12">Type fact.</typeparam>
            <typeparam name="TFact13">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.WantFact``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <typeparam name="TFact11">Type fact.</typeparam>
            <typeparam name="TFact12">Type fact.</typeparam>
            <typeparam name="TFact13">Type fact.</typeparam>
            <typeparam name="TFact14">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.WantFact``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <typeparam name="TFact11">Type fact.</typeparam>
            <typeparam name="TFact12">Type fact.</typeparam>
            <typeparam name="TFact13">Type fact.</typeparam>
            <typeparam name="TFact14">Type fact.</typeparam>
            <typeparam name="TFact15">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.FactFactoryBase`5.WantFact``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Requesting desired facts through action.
            </summary>
            <typeparam name="TFact1">Type fact.</typeparam>
            <typeparam name="TFact2">Type fact.</typeparam>
            <typeparam name="TFact3">Type fact.</typeparam>
            <typeparam name="TFact4">Type fact.</typeparam>
            <typeparam name="TFact5">Type fact.</typeparam>
            <typeparam name="TFact6">Type fact.</typeparam>
            <typeparam name="TFact7">Type fact.</typeparam>
            <typeparam name="TFact8">Type fact.</typeparam>
            <typeparam name="TFact9">Type fact.</typeparam>
            <typeparam name="TFact10">Type fact.</typeparam>
            <typeparam name="TFact11">Type fact.</typeparam>
            <typeparam name="TFact12">Type fact.</typeparam>
            <typeparam name="TFact13">Type fact.</typeparam>
            <typeparam name="TFact14">Type fact.</typeparam>
            <typeparam name="TFact15">Type fact.</typeparam>
            <typeparam name="TFact16">Type fact.</typeparam>
            <param name="wantFactAction">Desired action.</param>
        </member>
        <member name="T:GetcuReone.FactFactory.FactType`1">
            <summary>
            Fact type
            </summary>
        </member>
        <member name="T:GetcuReone.FactFactory.Helpers.FactFactoryHelper">
            <summary>
            Helper for <see cref="T:GetcuReone.FactFactory.FactFactoryBase`5"/>
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Helpers.FactFactoryHelper.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            True - <paramref name="items"/> is null or empty
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Helpers.FactFactoryHelper.ToReadOnlyCollection``1(System.Collections.Generic.IList{``0})">
            <summary>
            Convert list to <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Helpers.FactFactoryHelper.CreateException(System.String,System.String)">
            <summary>
            Create <see cref="T:GetcuReone.FactFactory.Exceptions.FactFactoryException"/>
            </summary>
            <param name="code">error code</param>
            <param name="reason">error reason</param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Helpers.FactFactoryHelper.CreateDeriveException``1(System.Collections.Generic.IReadOnlyCollection{GetcuReone.FactFactory.Exceptions.Entities.DeriveErrorDetail{``0}})">
            <summary>
            Create <see cref="T:GetcuReone.FactFactory.Exceptions.InvalidDeriveOperationException`1"/>.
            </summary>
            <typeparam name="TFact"></typeparam>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Helpers.FactFactoryHelper.CreateDeriveException``1(System.String,System.String)">
            <summary>
            Create <see cref="T:GetcuReone.FactFactory.Exceptions.InvalidDeriveOperationException`1"/>.
            </summary>
            <typeparam name="TFact">Base class for facts.</typeparam>
            <param name="code">Error code.</param>
            <param name="reason">Error reason.</param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Helpers.FactFactoryHelper.CreateDeriveException``1(System.String,System.String,GetcuReone.FactFactory.Interfaces.IWantAction{``0})">
            <summary>
            Create <see cref="T:GetcuReone.FactFactory.Exceptions.InvalidDeriveOperationException`1"/>.
            </summary>
            <typeparam name="TFact">Base class for facts.</typeparam>
            <param name="code">Error code.</param>
            <param name="reason">Error reason.</param>
            <param name="requiredAction">Action for which it was not possible to derive the facts.</param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Helpers.FactFactoryHelper.CreateDeriveException``1(System.String,System.String,GetcuReone.FactFactory.Interfaces.IWantAction{``0},System.Collections.Generic.IReadOnlyCollection{GetcuReone.FactFactory.Exceptions.Entities.DeriveFactErrorDetail})">
            <summary>
            Create <see cref="T:GetcuReone.FactFactory.Exceptions.InvalidDeriveOperationException`1"/>.
            </summary>
            <typeparam name="TFact">Base class for facts.</typeparam>
            <param name="code">Error code.</param>
            <param name="reason">Error reason.</param>
            <param name="requiredAction">Action for which it was not possible to derive the facts.</param>
            <param name="requiredFacts">The facts that tried to derive.</param>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.FactFactory.InnerEntities.Enums.TreeStatus">
            <summary>
            Tree build status.
            </summary>
        </member>
        <member name="F:GetcuReone.FactFactory.InnerEntities.Enums.TreeStatus.BeingBuilt">
            <summary>
            Tree is being built.
            </summary>
        </member>
        <member name="F:GetcuReone.FactFactory.InnerEntities.Enums.TreeStatus.Built">
            <summary>
            Tree built.
            </summary>
        </member>
        <member name="F:GetcuReone.FactFactory.InnerEntities.Enums.TreeStatus.Cencel">
            <summary>
            The tree is canceled.
            </summary>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.IContainedFact">
            <summary>
            Information about a fact that is contained in the container at the time of the function call <see cref="M:GetcuReone.FactFactory.Interfaces.IFactFactory`5.Derive"/>
            </summary>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.ICopy`1">
            <summary>
            Interface for copying objects.
            </summary>
            <typeparam name="TCopyObj">Type of object to copy.</typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.ICopy`1.Copy">
            <summary>
            Object copy method
            </summary>
            <returns>Copied object.</returns>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.IFact">
            <summary>
            Fact interface
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFact.GetFactType">
            <summary>
            Return fact information as an output parameter
            </summary>
            <returns></returns>
        </member>
        <member name="P:GetcuReone.FactFactory.Interfaces.IFact.CalculatedByRule">
            <summary>
            It was calculated using the rule.
            </summary>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.IFactContainer`1">
            <summary>
            Container interface with facts for deriving other facts.
            </summary>
            <typeparam name="TFactBase">The type from which all facts in this container should be inherited.</typeparam>
        </member>
        <member name="P:GetcuReone.FactFactory.Interfaces.IFactContainer`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:GetcuReone.FactFactory.Interfaces.IFactContainer`1"/> is read-only.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactContainer`1.Add``1(``0)">
            <summary>
            Add fact.
            </summary>
            <param name="fact">Fact.</param>
            <typeparam name="TFact">Type of fact to add.</typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactContainer`1.Remove``1">
            <summary>
            Remove fact.
            </summary>
            <typeparam name="TFact">Type of fact to delete.</typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactContainer`1.Remove``1(``0)">
            <summary>
            Remove fact.
            </summary>
            <param name="fact"></param>
            <typeparam name="TFact">Type of fact to delete.</typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactContainer`1.TryGetFact``1(``0@)">
            <summary>
            Try get fact.
            </summary>
            <typeparam name="TFact">Type of fact to return.</typeparam>
            <param name="fact"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactContainer`1.GetFact``1">
            <summary>
            Get fact.
            </summary>
            <typeparam name="TFact">Type of fact to return.</typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactContainer`1.Contains``1">
            <summary>
            Is this type of fact contained.
            </summary>
            <typeparam name="TFact">type of fact to check for.</typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactContainer`1.Clear">
            <summary>
            Clear this container.
            </summary>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.IFactFactory`5">
            <summary>
            Fact factory interface.
            </summary>
            <typeparam name="TFact">All facts that the fact factory works with should be inherited from this type.</typeparam>
            <typeparam name="TFactContainer">Type fact container.</typeparam>
            <typeparam name="TFactRule">Type fact rule.</typeparam>
            <typeparam name="TFactRuleCollection">Type set rule.</typeparam>
            <typeparam name="TWantAction">Type 'want action'.</typeparam>
        </member>
        <member name="P:GetcuReone.FactFactory.Interfaces.IFactFactory`5.Container">
            <summary>
            Fact container
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.Interfaces.IFactFactory`5.Rules">
            <summary>
            Collection of rules for derive facts
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactFactory`5.Derive">
            <summary>
            Derive the facts
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactFactory`5.DeriveFact``1">
            <summary>
            Derive <typeparamref name="TWantFact"/>.
            </summary>
            <typeparam name="TWantFact">Type of desired fact.</typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactFactory`5.WantFact(`4)">
            <summary>
            Requesting a desired fact through action
            </summary>
            <param name="wantAction"></param>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.IFactRule`1">
            <summary>
            Rule of fact calculation.
            </summary>
            <typeparam name="TFactBase">The type of fact from which the facts in the container should be inherited.</typeparam>
        </member>
        <member name="P:GetcuReone.FactFactory.Interfaces.IFactRule`1.InputFactTypes">
            <summary>
            Information on input factacles rules.
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.Interfaces.IFactRule`1.OutputFactType">
            <summary>
            Information on output fact.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactRule`1.CanCalculate``2(``0,``1)">
            <summary>
            Is it possible to calculate the fact.
            </summary>
            <param name="container"></param>
            <param name="wantAction"></param>
            <typeparam name="TContainer"></typeparam>
            <typeparam name="TWantAction"></typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactRule`1.Calculate``2(``0,``1)">
            <summary>
            Rule of fact calculate.
            </summary>
            <param name="container"></param>
            <param name="wantAction"></param>
            <typeparam name="TContainer"></typeparam>
            <typeparam name="TWantAction"></typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactRule`1.Compare``1(``0)">
            <summary>
            Compare rules.
            </summary>
            <typeparam name="TFactRule"></typeparam>
            <param name="factRule"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactRule`1.GetNecessaryFactTypes``2(``0,``1)">
            <summary>
            Get the necessary fact types.
            </summary>
            <typeparam name="TWantAction"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="wantAction"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.IFactType">
            <summary>
            Fact type
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactType.Compare``1(``0)">
            <summary>
            Compare <see cref="T:GetcuReone.FactFactory.Interfaces.IFactType"/>
            </summary>
            <param name="factInfo"></param>
        </member>
        <member name="P:GetcuReone.FactFactory.Interfaces.IFactType.FactName">
            <summary>
            Fact name
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactType.IsFactType``1">
            <summary>
            Is it possible to convert a fact type to a <typeparamref name="TFact"/>
            </summary>
            <typeparam name="TFact"></typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactType.CreateSpecialFact``1">
            <summary>
            Create an fact of this type. Method created for special facts.
            </summary>
            <typeparam name="TFact"></typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactType.TryGetFact``1(System.Collections.Generic.IEnumerable{``0},``0@)">
            <summary>
            Try to get a fact from the container.
            </summary>
            <typeparam name="TFact">Type base class for facts.</typeparam>
            <param name="facts">Set fact.</param>
            <param name="fact">Fact.</param>
            <returns>True - it turned out to return the fact</returns>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.INoDerivedFact">
            <summary>
            interface for fact that cannot be calculated
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.Interfaces.INoDerivedFact.Value">
            <summary>
            Information about a fact that cannot be calculated
            </summary>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.INotContainedFact">
            <summary>
            Information about a fact that is not contained in the container at the time of the function call <see cref="M:GetcuReone.FactFactory.Interfaces.IFactFactory`5.Derive"/>
            </summary>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.ISpecialFact">
            <summary>
            Basic interface for special facts.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.ISpecialFact.IsFactContained``1(GetcuReone.FactFactory.Interfaces.IFactContainer{``0})">
            <summary>
            Is the fact contained in the container
            </summary>
            <typeparam name="TFact"></typeparam>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.IWantAction`1">
            <summary>
            Desired action information.
            </summary>
            <typeparam name="TFactBase"></typeparam>
        </member>
        <member name="P:GetcuReone.FactFactory.Interfaces.IWantAction`1.InputFactTypes">
            <summary>
            Facts required to launch an action.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IWantAction`1.Invoke``1(``0)">
            <summary>
            Run action.
            </summary>
            <typeparam name="TFactContainer">container with <see cref="P:GetcuReone.FactFactory.Interfaces.IWantAction`1.InputFactTypes"/>.</typeparam>
            <param name="container"></param>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IWantAction`1.GetNecessaryFactTypes``1(``0)">
            <summary>
            Get the necessary fact types.
            </summary>
            <typeparam name="TFactContainer"></typeparam>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.IWorkFact`1">
            <summary>
            Basic interface for objects that work directly with facts.
            </summary>
            <typeparam name="TFactBase"></typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IWorkFact`1.IsMorePriorityThan``2(``0,``1)">
            <summary>
            True, the current object is more priority than <paramref name="workFact"/>.
            </summary>
            <typeparam name="TWorkFact"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="workFact"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IWorkFact`1.IsLessPriorityThan``2(``0,``1)">
            <summary>
            True, the current object is less priority than <paramref name="workFact"/>.
            </summary>
            <typeparam name="TWorkFact"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="workFact"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
    </members>
</doc>
