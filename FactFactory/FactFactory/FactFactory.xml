<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FactFactory</name>
    </assembly>
    <members>
        <member name="T:FactFactory.Entities.FactContainer">
            <summary>
            Fact collection
            </summary>
        </member>
        <member name="M:FactFactory.Entities.FactContainer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:FactFactory.Entities.FactContainer.#ctor(System.Collections.Generic.IEnumerable{FactFactory.Interfaces.IFact})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:FactFactory.Entities.FactContainer.Add``1(``0)">
            <summary>
            Add fact
            </summary>
            <typeparam name="TFact">type fact</typeparam>
            <param name="fact">fact</param>
        </member>
        <member name="M:FactFactory.Entities.FactContainer.Remove``1">
            <summary>
            Remove fact
            </summary>
            <typeparam name="TFact">type fact</typeparam>
        </member>
        <member name="M:FactFactory.Entities.FactContainer.TryGetFact``1(``0@)">
            <summary>
            Try get fact
            </summary>
            <typeparam name="TFact"></typeparam>
            <param name="fact"></param>
            <returns></returns>
        </member>
        <member name="M:FactFactory.Entities.FactContainer.GetFact``1">
            <summary>
            Get fact
            </summary>
            <typeparam name="TFact"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FactFactory.Entities.FactContainer.Contains``1">
            <summary>
            Is this type of fact contained
            </summary>
            <typeparam name="TFact"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FactFactory.Entities.FactContainer.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactContainer.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:FactFactory.Entities.FactInfo`1">
            <inheritdoc />
        </member>
        <member name="P:FactFactory.Entities.FactInfo`1.FactName">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactInfo`1.Compare``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactInfo`1.ContainsContainer(FactFactory.Interfaces.IFactContainer)">
            <inheritdoc />
        </member>
        <member name="T:FactFactory.Entities.FactRule">
            <inheritdoc />
        </member>
        <member name="P:FactFactory.Entities.FactRule.InputFactInfos">
            <inheritdoc />
        </member>
        <member name="P:FactFactory.Entities.FactRule.OutputFactInfo">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactRule.#ctor(System.Func{FactFactory.Interfaces.IFactContainer,FactFactory.Interfaces.IFact},System.Collections.Generic.List{FactFactory.Interfaces.IFactInfo},FactFactory.Interfaces.IFactInfo)">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactRule.Derive(FactFactory.Interfaces.IFactContainer)">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactRule.CanDerive(FactFactory.Interfaces.IFactContainer)">
            <inheritdoc />
        </member>
        <member name="T:FactFactory.Entities.FactRuleCollection">
            <summary>
            Collection fo <see cref="T:FactFactory.Entities.FactRule"/>
            </summary>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.#ctor">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.#ctor(System.Collections.Generic.IList{FactFactory.Entities.FactRule})">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``1(System.Func{``0})">
            <summary>
            Add a rule without input facts
            </summary>
            <typeparam name="TFactResult">type of fact result</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``2(System.Func{``0,``1})">
            <summary>
            Add a rule with 1 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``3(System.Func{``0,``1,``2})">
            <summary>
            Add a rule with 2 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Add a rule with 3 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Add a rule with 4 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Add a rule with 5 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Add a rule with 6 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Add a rule with 7 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactIn7">type 7 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Add a rule with 8 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactIn7">type 7 input fact</typeparam>
            <typeparam name="TFactIn8">type 8 input fact</typeparam>
            <typeparam name="TFactIn9">type 9 input fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Add a rule with 9 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactIn7">type 7 input fact</typeparam>
            <typeparam name="TFactIn8">type 8 input fact</typeparam>
            <typeparam name="TFactIn9">type 9 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Add a rule with 10 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactIn7">type 7 input fact</typeparam>
            <typeparam name="TFactIn8">type 8 input fact</typeparam>
            <typeparam name="TFactIn9">type 9 input fact</typeparam>
            <typeparam name="TFactIn10">type 10 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Add a rule with 11 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactIn7">type 7 input fact</typeparam>
            <typeparam name="TFactIn8">type 8 input fact</typeparam>
            <typeparam name="TFactIn9">type 9 input fact</typeparam>
            <typeparam name="TFactIn10">type 10 input fact</typeparam>
            <typeparam name="TFactIn11">type 11 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Add a rule with 12 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactIn7">type 7 input fact</typeparam>
            <typeparam name="TFactIn8">type 8 input fact</typeparam>
            <typeparam name="TFactIn9">type 9 input fact</typeparam>
            <typeparam name="TFactIn10">type 10 input fact</typeparam>
            <typeparam name="TFactIn11">type 11 input fact</typeparam>
            <typeparam name="TFactIn12">type 12 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Add a rule with 13 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactIn7">type 7 input fact</typeparam>
            <typeparam name="TFactIn8">type 8 input fact</typeparam>
            <typeparam name="TFactIn9">type 9 input fact</typeparam>
            <typeparam name="TFactIn10">type 10 input fact</typeparam>
            <typeparam name="TFactIn11">type 11 input fact</typeparam>
            <typeparam name="TFactIn12">type 12 input fact</typeparam>
            <typeparam name="TFactIn13">type 13 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Add a rule with 14 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactIn7">type 7 input fact</typeparam>
            <typeparam name="TFactIn8">type 8 input fact</typeparam>
            <typeparam name="TFactIn9">type 9 input fact</typeparam>
            <typeparam name="TFactIn10">type 10 input fact</typeparam>
            <typeparam name="TFactIn11">type 11 input fact</typeparam>
            <typeparam name="TFactIn12">type 12 input fact</typeparam>
            <typeparam name="TFactIn13">type 13 input fact</typeparam>
            <typeparam name="TFactIn14">type 14 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Add a rule with 15 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactIn7">type 7 input fact</typeparam>
            <typeparam name="TFactIn8">type 8 input fact</typeparam>
            <typeparam name="TFactIn9">type 9 input fact</typeparam>
            <typeparam name="TFactIn10">type 10 input fact</typeparam>
            <typeparam name="TFactIn11">type 11 input fact</typeparam>
            <typeparam name="TFactIn12">type 12 input fact</typeparam>
            <typeparam name="TFactIn13">type 13 input fact</typeparam>
            <typeparam name="TFactIn14">type 14 input fact</typeparam>
            <typeparam name="TFactIn15">type 15 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Add a rule with 16 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactIn7">type 7 input fact</typeparam>
            <typeparam name="TFactIn8">type 8 input fact</typeparam>
            <typeparam name="TFactIn9">type 9 input fact</typeparam>
            <typeparam name="TFactIn10">type 10 input fact</typeparam>
            <typeparam name="TFactIn11">type 11 input fact</typeparam>
            <typeparam name="TFactIn12">type 12 input fact</typeparam>
            <typeparam name="TFactIn13">type 13 input fact</typeparam>
            <typeparam name="TFactIn14">type 14 input fact</typeparam>
            <typeparam name="TFactIn15">type 15 input fact</typeparam>
            <typeparam name="TFactIn16">type 16 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="T:FactFactory.Exceptions.FactNotFoundException`1">
            <summary>
            Fact not found error
            </summary>
            <typeparam name="TFact"></typeparam>
        </member>
        <member name="M:FactFactory.Exceptions.FactNotFoundException`1.#ctor">
            <inheritdoc />
        </member>
        <member name="T:FactFactory.Exceptions.InvalidDeriveOperationException">
            <summary>
            <see cref="T:System.InvalidOperationException"/> for method <see cref="M:FactFactory.Interfaces.IFactFactory`2.Derive"/>
            </summary>
        </member>
        <member name="P:FactFactory.Exceptions.InvalidDeriveOperationException.NotFoundRuleForFactsSet">
            <summary>
            A set of fact sets for which no rules were found
            </summary>
        </member>
        <member name="M:FactFactory.Exceptions.InvalidDeriveOperationException.#ctor(System.String,System.Collections.Generic.List{System.Collections.Generic.List{FactFactory.Interfaces.IFactInfo}})">
            <summary>
            Contructor
            </summary>
            <param name="message"></param>
            <param name="notFoundRuleForFactsSet">a set of fact sets for which no rules were found</param>
        </member>
        <member name="T:FactFactory.FactFactoryBase">
            <summary>
            Base class for fact factory
            </summary>
        </member>
        <member name="P:FactFactory.FactFactoryBase.Container">
            <summary>
            Fact container
            </summary>
        </member>
        <member name="P:FactFactory.FactFactoryBase.Rules">
            <summary>
            Collection of rules for derive facts
            </summary>
        </member>
        <member name="M:FactFactory.FactFactoryBase.GetFactInfosAvailableOnlyRules">
            <summary>
            Get facts available only in rules
            </summary>
        </member>
        <member name="M:FactFactory.FactFactoryBase.CreateObject``2(System.Func{``0,``1},``0)">
            <summary>
            Object creation method
            </summary>
            <typeparam name="TParameters"></typeparam>
            <typeparam name="TObj"></typeparam>
            <param name="factoryFunc"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:FactFactory.FactFactoryBase.Derive">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.FactFactoryBase.DeriveAndReturn``1">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.FactFactoryBase.GetDefaultRules">
            <summary>
            Get default rules
            </summary>
            <returns>rules</returns>
        </member>
        <member name="M:FactFactory.FactFactoryBase.WantFact``1(System.Action{``0})">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.FactFactoryBase.WantFact``2(System.Action{``0,``1})">
            <inheritdoc />
        </member>
        <member name="T:FactFactory.Facts.CurrentFactInfoFindingFact">
            <summary>
            Current fact finding information
            <para>
            Only available for request in the rules
            </para>
            </summary>
        </member>
        <member name="M:FactFactory.Facts.CurrentFactInfoFindingFact.#ctor(FactFactory.Interfaces.IFactInfo)">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Facts.CurrentFactInfoFindingFact.GetFactInfo">
            <inheritdoc />
        </member>
        <member name="T:FactFactory.Facts.DateOfDeriveCurrentFact">
            <summary>
            Start date for deriving of current fact
            <para>
            Only available for request in the rules
            </para>
            </summary>
        </member>
        <member name="M:FactFactory.Facts.DateOfDeriveCurrentFact.#ctor(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Facts.DateOfDeriveCurrentFact.GetFactInfo">
            <inheritdoc />
        </member>
        <member name="T:FactFactory.Facts.DateOfDeriveFact">
            <summary>
            Start date for deriving of all facts
            </summary>
        </member>
        <member name="M:FactFactory.Facts.DateOfDeriveFact.#ctor(System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="fact"></param>
        </member>
        <member name="M:FactFactory.Facts.DateOfDeriveFact.GetFactInfo">
            <inheritdoc />
        </member>
        <member name="T:FactFactory.Facts.DerivingCurrentFactsFact">
            <summary>
            Current Calculated Facts
            </summary>
        </member>
        <member name="M:FactFactory.Facts.DerivingCurrentFactsFact.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{FactFactory.Interfaces.IFactInfo})">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Facts.DerivingCurrentFactsFact.GetFactInfo">
            <inheritdoc />
        </member>
        <member name="T:FactFactory.Facts.FactBase`1">
            <summary>
            Base class for fact
            </summary>
            <typeparam name="TFact">type fact</typeparam>
        </member>
        <member name="P:FactFactory.Facts.FactBase`1.Value">
            <summary>
            Value fact
            </summary>
        </member>
        <member name="M:FactFactory.Facts.FactBase`1.#ctor(`0)">
            <summary>
            Constructor
            </summary>
            <param name="fact"></param>
        </member>
        <member name="M:FactFactory.Facts.FactBase`1.GetFactInfo">
            <summary>
            Need to insert return new FactInfo{type of your fact}();
            </summary>
            <returns></returns>
        </member>
        <member name="T:FactFactory.Interfaces.IFact">
            <summary>
            Fact interface
            </summary>
        </member>
        <member name="M:FactFactory.Interfaces.IFact.GetFactInfo">
            <summary>
            Return fact information as an output parameter
            </summary>
            <returns></returns>
        </member>
        <member name="T:FactFactory.Interfaces.IFact`1">
            <summary>
            Typed Fact Interface
            </summary>
        </member>
        <member name="P:FactFactory.Interfaces.IFact`1.Value">
            <summary>
            Value fact
            </summary>
        </member>
        <member name="T:FactFactory.Interfaces.IFactContainer">
            <summary>
            Container interface with facts for deriving other facts
            </summary>
        </member>
        <member name="M:FactFactory.Interfaces.IFactContainer.Add``1(``0)">
            <summary>
            Add fact
            </summary>
            <typeparam name="TFact">type fact</typeparam>
            <param name="fact">fact</param>
        </member>
        <member name="M:FactFactory.Interfaces.IFactContainer.Remove``1">
            <summary>
            Remove fact
            </summary>
            <typeparam name="TFact">type fact</typeparam>
        </member>
        <member name="M:FactFactory.Interfaces.IFactContainer.TryGetFact``1(``0@)">
            <summary>
            Try get fact
            </summary>
            <typeparam name="TFact"></typeparam>
            <param name="fact"></param>
            <returns></returns>
        </member>
        <member name="M:FactFactory.Interfaces.IFactContainer.GetFact``1">
            <summary>
            Get fact
            </summary>
            <typeparam name="TFact"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FactFactory.Interfaces.IFactContainer.Contains``1">
            <summary>
            Is this type of fact contained
            </summary>
            <typeparam name="TFact"></typeparam>
            <returns></returns>
        </member>
        <member name="T:FactFactory.Interfaces.IFactFactory`2">
            <summary>
            Fact factory interface
            </summary>
        </member>
        <member name="P:FactFactory.Interfaces.IFactFactory`2.Container">
            <summary>
            Fact container
            </summary>
        </member>
        <member name="P:FactFactory.Interfaces.IFactFactory`2.Rules">
            <summary>
            Collection of rules for derive facts
            </summary>
        </member>
        <member name="M:FactFactory.Interfaces.IFactFactory`2.Derive">
            <summary>
            Derive the facts
            </summary>
        </member>
        <member name="M:FactFactory.Interfaces.IFactFactory`2.DeriveAndReturn``1">
            <summary>
            Derive a fact from the rules and return it
            </summary>
            <typeparam name="TFact"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FactFactory.Interfaces.IFactFactory`2.WantFact``1(System.Action{``0})">
            <summary>
            Wish to derive a fact
            </summary>
            <typeparam name="TFact">type fact</typeparam>
            <param name="wantFactAction">action to be taken after the fact is derived from the rule</param>
        </member>
        <member name="M:FactFactory.Interfaces.IFactFactory`2.WantFact``2(System.Action{``0,``1})">
            <summary>
            Want to derive a facts
            </summary>
            <typeparam name="TFact1">type 1 input fact</typeparam>
            <typeparam name="TFact2">type 1 input fact</typeparam>
            <param name="wantFactAction">action to be taken after the fact is derived from the rule</param>
        </member>
        <member name="T:FactFactory.Interfaces.IFactInfo">
            <summary>
            Fact info
            </summary>
        </member>
        <member name="M:FactFactory.Interfaces.IFactInfo.Compare``1(``0)">
            <summary>
            Compare <see cref="T:FactFactory.Interfaces.IFactInfo"/>
            </summary>
            <param name="factInfo"></param>
        </member>
        <member name="P:FactFactory.Interfaces.IFactInfo.FactName">
            <summary>
            Fact name
            </summary>
        </member>
        <member name="M:FactFactory.Interfaces.IFactInfo.ContainsContainer(FactFactory.Interfaces.IFactContainer)">
            <summary>
            Is in the container
            </summary>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="T:FactFactory.Interfaces.IFactRule">
            <summary>
            Rule of fact derivation
            </summary>
        </member>
        <member name="P:FactFactory.Interfaces.IFactRule.InputFactInfos">
            <summary>
            Information on input factacles rules
            </summary>
        </member>
        <member name="P:FactFactory.Interfaces.IFactRule.OutputFactInfo">
            <summary>
            Rule exit information
            </summary>
        </member>
        <member name="M:FactFactory.Interfaces.IFactRule.CanDerive(FactFactory.Interfaces.IFactContainer)">
            <summary>
            is it possible to derive the fact
            </summary>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:FactFactory.Interfaces.IFactRule.Derive(FactFactory.Interfaces.IFactContainer)">
            <summary>
            Rule of fact derive
            </summary>
            <param name="container"></param>
            <returns></returns>
        </member>
    </members>
</doc>
