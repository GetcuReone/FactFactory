<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FactFactory</name>
    </assembly>
    <members>
        <member name="T:FactFactory.Consts.ErrorCodes">
            <summary>
            Error codes
            </summary>
        </member>
        <member name="F:FactFactory.Consts.ErrorCodes.InvalidData">
            <summary>
            Invalid data
            </summary>
        </member>
        <member name="F:FactFactory.Consts.ErrorCodes.FactCannotCalculated">
            <summary>
            Fact cannot be calculated
            </summary>
        </member>
        <member name="F:FactFactory.Consts.ErrorCodes.RuleCollectionEmpty">
            <summary>
            Collection of rules for calculating the fact is empty
            </summary>
        </member>
        <member name="F:FactFactory.Consts.ErrorCodes.RuleNotFound">
            <summary>
            Rule not found
            </summary>
        </member>
        <member name="T:FactFactory.Entities.DeriveErrorDetail">
            <summary>
            Error detail for method <see cref="M:FactFactory.FactFactoryBase`4.Derive"/>
            </summary>
        </member>
        <member name="M:FactFactory.Entities.DeriveErrorDetail.#ctor(System.String,System.String,FactFactory.Interfaces.IWantAction,System.Collections.Generic.Dictionary{FactFactory.Interfaces.IFactInfo,System.Collections.Generic.List{System.Collections.Generic.List{FactFactory.Interfaces.IFactInfo}}})">
            <inheritdoc />
        </member>
        <member name="P:FactFactory.Entities.DeriveErrorDetail.Action">
            <summary>
            The action, the calculation of which led to an error
            </summary>
        </member>
        <member name="P:FactFactory.Entities.DeriveErrorDetail.NotFoundFacts">
            <summary>
            The sets of facts which were not enough to calculate. The presence of any of these sets allows you to calculate <see cref="P:FactFactory.Entities.DeriveErrorDetail.Action"/>
            </summary>
        </member>
        <member name="T:FactFactory.Entities.ErrorDetail">
            <summary>
            Error detail
            </summary>
        </member>
        <member name="M:FactFactory.Entities.ErrorDetail.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="code"></param>
            <param name="reason"></param>
        </member>
        <member name="P:FactFactory.Entities.ErrorDetail.Code">
            <summary>
            Error code
            </summary>
        </member>
        <member name="P:FactFactory.Entities.ErrorDetail.Reason">
            <summary>
            Error reason
            </summary>
        </member>
        <member name="T:FactFactory.Entities.FactContainer">
            <summary>
            Fact collection
            </summary>
        </member>
        <member name="M:FactFactory.Entities.FactContainer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:FactFactory.Entities.FactContainer.#ctor(System.Collections.Generic.IEnumerable{FactFactory.Interfaces.IFact})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:FactFactory.Entities.FactContainer.Add``1(``0)">
            <summary>
            Add fact
            </summary>
            <typeparam name="TFact">type fact</typeparam>
            <param name="fact">fact</param>
        </member>
        <member name="M:FactFactory.Entities.FactContainer.Remove``1">
            <summary>
            Remove fact
            </summary>
            <typeparam name="TFact">type fact</typeparam>
        </member>
        <member name="M:FactFactory.Entities.FactContainer.TryGetFact``1(``0@)">
            <summary>
            Try get fact
            </summary>
            <typeparam name="TFact"></typeparam>
            <param name="fact"></param>
            <returns></returns>
        </member>
        <member name="M:FactFactory.Entities.FactContainer.GetFact``1">
            <summary>
            Get fact
            </summary>
            <typeparam name="TFact"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FactFactory.Entities.FactContainer.Contains``1">
            <summary>
            Is this type of fact contained
            </summary>
            <typeparam name="TFact"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FactFactory.Entities.FactContainer.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactContainer.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:FactFactory.Entities.FactInfo`1">
            <inheritdoc />
        </member>
        <member name="P:FactFactory.Entities.FactInfo`1.FactName">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactInfo`1.Compare``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactInfo`1.ContainsContainer``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactInfo`1.GetNotContainedFact">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactInfo`1.IsFactType``1">
            <inheritdoc />
        </member>
        <member name="T:FactFactory.Entities.FactRule">
            <inheritdoc />
        </member>
        <member name="P:FactFactory.Entities.FactRule.InputFactInfos">
            <inheritdoc />
        </member>
        <member name="P:FactFactory.Entities.FactRule.OutputFactInfo">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactRule.#ctor(System.Func{FactFactory.Interfaces.IFactContainer,FactFactory.Interfaces.IFact},System.Collections.Generic.List{FactFactory.Interfaces.IFactInfo},FactFactory.Interfaces.IFactInfo)">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactRule.Derive``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactRule.CanDerive``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactRule.Compare``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactRule.ToString">
            <inheritdoc />
        </member>
        <member name="T:FactFactory.Entities.FactRuleCollection">
            <summary>
            Collection fo <see cref="T:FactFactory.Entities.FactRule"/>
            </summary>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.#ctor(System.Collections.Generic.IEnumerable{FactFactory.Entities.FactRule})">
            <summary>
            Constructor
            </summary>
            <param name="factRules"></param>
        </member>
        <member name="P:FactFactory.Entities.FactRuleCollection.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:FactFactory.Entities.FactRuleCollection.Count">
            <inheritdoc />
        </member>
        <member name="P:FactFactory.Entities.FactRuleCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add(FactFactory.Entities.FactRule)">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``1(System.Func{``0})">
            <summary>
            Add a rule without input facts
            </summary>
            <typeparam name="TFactResult">type of fact result</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``2(System.Func{``0,``1})">
            <summary>
            Add a rule with 1 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``3(System.Func{``0,``1,``2})">
            <summary>
            Add a rule with 2 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Add a rule with 3 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Add a rule with 4 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Add a rule with 5 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Add a rule with 6 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Add a rule with 7 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactIn7">type 7 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Add a rule with 8 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactIn7">type 7 input fact</typeparam>
            <typeparam name="TFactIn8">type 8 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Add a rule with 9 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactIn7">type 7 input fact</typeparam>
            <typeparam name="TFactIn8">type 8 input fact</typeparam>
            <typeparam name="TFactIn9">type 9 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Add a rule with 10 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactIn7">type 7 input fact</typeparam>
            <typeparam name="TFactIn8">type 8 input fact</typeparam>
            <typeparam name="TFactIn9">type 9 input fact</typeparam>
            <typeparam name="TFactIn10">type 10 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Add a rule with 11 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactIn7">type 7 input fact</typeparam>
            <typeparam name="TFactIn8">type 8 input fact</typeparam>
            <typeparam name="TFactIn9">type 9 input fact</typeparam>
            <typeparam name="TFactIn10">type 10 input fact</typeparam>
            <typeparam name="TFactIn11">type 11 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Add a rule with 12 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactIn7">type 7 input fact</typeparam>
            <typeparam name="TFactIn8">type 8 input fact</typeparam>
            <typeparam name="TFactIn9">type 9 input fact</typeparam>
            <typeparam name="TFactIn10">type 10 input fact</typeparam>
            <typeparam name="TFactIn11">type 11 input fact</typeparam>
            <typeparam name="TFactIn12">type 12 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Add a rule with 13 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactIn7">type 7 input fact</typeparam>
            <typeparam name="TFactIn8">type 8 input fact</typeparam>
            <typeparam name="TFactIn9">type 9 input fact</typeparam>
            <typeparam name="TFactIn10">type 10 input fact</typeparam>
            <typeparam name="TFactIn11">type 11 input fact</typeparam>
            <typeparam name="TFactIn12">type 12 input fact</typeparam>
            <typeparam name="TFactIn13">type 13 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Add a rule with 14 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactIn7">type 7 input fact</typeparam>
            <typeparam name="TFactIn8">type 8 input fact</typeparam>
            <typeparam name="TFactIn9">type 9 input fact</typeparam>
            <typeparam name="TFactIn10">type 10 input fact</typeparam>
            <typeparam name="TFactIn11">type 11 input fact</typeparam>
            <typeparam name="TFactIn12">type 12 input fact</typeparam>
            <typeparam name="TFactIn13">type 13 input fact</typeparam>
            <typeparam name="TFactIn14">type 14 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Add a rule with 15 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactIn7">type 7 input fact</typeparam>
            <typeparam name="TFactIn8">type 8 input fact</typeparam>
            <typeparam name="TFactIn9">type 9 input fact</typeparam>
            <typeparam name="TFactIn10">type 10 input fact</typeparam>
            <typeparam name="TFactIn11">type 11 input fact</typeparam>
            <typeparam name="TFactIn12">type 12 input fact</typeparam>
            <typeparam name="TFactIn13">type 13 input fact</typeparam>
            <typeparam name="TFactIn14">type 14 input fact</typeparam>
            <typeparam name="TFactIn15">type 15 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Add``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Add a rule with 16 input facts
            </summary>
            <typeparam name="TFactIn1">type 1 input fact</typeparam>
            <typeparam name="TFactIn2">type 2 input fact</typeparam>
            <typeparam name="TFactIn3">type 3 input fact</typeparam>
            <typeparam name="TFactIn4">type 4 input fact</typeparam>
            <typeparam name="TFactIn5">type 5 input fact</typeparam>
            <typeparam name="TFactIn6">type 6 input fact</typeparam>
            <typeparam name="TFactIn7">type 7 input fact</typeparam>
            <typeparam name="TFactIn8">type 8 input fact</typeparam>
            <typeparam name="TFactIn9">type 9 input fact</typeparam>
            <typeparam name="TFactIn10">type 10 input fact</typeparam>
            <typeparam name="TFactIn11">type 11 input fact</typeparam>
            <typeparam name="TFactIn12">type 12 input fact</typeparam>
            <typeparam name="TFactIn13">type 13 input fact</typeparam>
            <typeparam name="TFactIn14">type 14 input fact</typeparam>
            <typeparam name="TFactIn15">type 15 input fact</typeparam>
            <typeparam name="TFactIn16">type 16 input fact</typeparam>
            <typeparam name="TFactOut">type output fact</typeparam>
            <param name="rule">rule of fact derivation</param>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.AddRange(System.Collections.Generic.IEnumerable{FactFactory.Entities.FactRule})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:FactFactory.Entities.FactRuleCollection"/>
            </summary>
            <param name="rules">The collection whose elements should be added to the end of the  <see cref="T:FactFactory.Entities.FactRuleCollection"/>. 
            The collection itself cannot be null, but it can contain elements that are null,
            if type T is a reference type.</param>
            <exception cref="T:System.ArgumentNullException">collection is null</exception>
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Clear">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Contains(FactFactory.Entities.FactRule)">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.CopyTo(FactFactory.Entities.FactRule[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.IndexOf(FactFactory.Entities.FactRule)">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Insert(System.Int32,FactFactory.Entities.FactRule)">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.Remove(FactFactory.Entities.FactRule)">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.FactRuleCollection.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:FactFactory.Entities.WantAction">
            <summary>
            Desired action information
            </summary>
        </member>
        <member name="P:FactFactory.Entities.WantAction.InputFacts">
            <inheritdoc />
        </member>
        <member name="P:FactFactory.Entities.WantAction.DateOfDerive">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.WantAction.#ctor(System.Action{FactFactory.Interfaces.IFactContainer},System.Collections.Generic.IList{FactFactory.Interfaces.IFactInfo})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:FactFactory.Entities.WantAction.Invoke``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Entities.WantAction.ToString">
            <inheritdoc />
        </member>
        <member name="T:FactFactory.Exceptions.FactFactoryException">
            <summary>
            Base error for FactFactory
            </summary>
        </member>
        <member name="M:FactFactory.Exceptions.FactFactoryException.#ctor(System.Collections.Generic.List{FactFactory.Entities.ErrorDetail})">
            <summary>
            Constructor
            </summary>
            <param name="details"></param>
        </member>
        <member name="T:FactFactory.Exceptions.FactFactoryExceptionBase`1">
            <summary>
            Base error for FactFactory
            </summary>
        </member>
        <member name="M:FactFactory.Exceptions.FactFactoryExceptionBase`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Constructor
            </summary>
            <param name="details"></param>
        </member>
        <member name="P:FactFactory.Exceptions.FactFactoryExceptionBase`1.Details">
            <summary>
            More info exception
            </summary>
        </member>
        <member name="T:FactFactory.Exceptions.FactNotFoundException`1">
            <summary>
            Fact not found error
            </summary>
            <typeparam name="TFact"></typeparam>
        </member>
        <member name="M:FactFactory.Exceptions.FactNotFoundException`1.#ctor">
            <inheritdoc />
        </member>
        <member name="T:FactFactory.Exceptions.InvalidDeriveOperationException">
            <summary>
            <see cref="T:FactFactory.Exceptions.FactFactoryException"/> for method <see cref="M:FactFactory.Interfaces.IFactFactory`4.Derive"/>
            </summary>
        </member>
        <member name="M:FactFactory.Exceptions.InvalidDeriveOperationException.#ctor(System.Collections.Generic.List{FactFactory.Entities.DeriveErrorDetail})">
            <summary>
            Constructor
            </summary>
            <param name="details"></param>
        </member>
        <member name="T:FactFactory.FactFactory">
            <inheritdoc />
        </member>
        <member name="P:FactFactory.FactFactory.Container">
            <summary>
            Fact container
            </summary>
        </member>
        <member name="P:FactFactory.FactFactory.Rules">
            <summary>
            Collection of rules for derive facts
            </summary>
        </member>
        <member name="M:FactFactory.FactFactory.Derive">
            <summary>
            Derive the facts
            </summary>
        </member>
        <member name="M:FactFactory.FactFactory.GetRulesForWantAction(FactFactory.Entities.WantAction)">
            <summary>
            Return a list with the appropriate rules at the time of the derive of the facts
            </summary>
            <returns></returns>
        </member>
        <member name="M:FactFactory.FactFactory.GetCopyContainer">
            <summary>
            Get copy container
            </summary>
            <returns></returns>
        </member>
        <member name="T:FactFactory.FactFactoryBase`4">
            <summary>
            Base class for fact factory
            </summary>
        </member>
        <member name="P:FactFactory.FactFactoryBase`4.Container">
            <summary>
            Fact container
            </summary>
        </member>
        <member name="P:FactFactory.FactFactoryBase`4.Rules">
            <summary>
            Collection of rules for derive facts
            </summary>
        </member>
        <member name="M:FactFactory.FactFactoryBase`4.CreateObject``2(System.Func{``0,``1},``0)">
            <summary>
            Object creation method
            </summary>
            <typeparam name="TParameters"></typeparam>
            <typeparam name="TObj"></typeparam>
            <param name="factoryFunc"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:FactFactory.FactFactoryBase`4.Derive">
            <summary>
            Derive the facts
            </summary>
        </member>
        <member name="M:FactFactory.FactFactoryBase`4.DeriveFact``1">
            <summary>
            Derive <typeparamref name="TFact"/>
            </summary>
            <typeparam name="TFact"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FactFactory.FactFactoryBase`4.WantFact(`3)">
            <summary>
            Requesting a desired fact through action
            </summary>
            <param name="wantAction"></param>
        </member>
        <member name="M:FactFactory.FactFactoryBase`4.GetFactInfosAvailableOnlyRules">
            <summary>
            Get facts available only in rules
            </summary>
        </member>
        <member name="M:FactFactory.FactFactoryBase`4.GetRulesForWantAction(`3)">
            <summary>
            Return a list with the appropriate rules at the time of the derive of the facts
            </summary>
            <returns></returns>
        </member>
        <member name="M:FactFactory.FactFactoryBase`4.CalculateFact(`1,`0)">
            <summary>
            Calculate fact
            </summary>
            <param name="rule">rule for calculating the fact</param>
            <param name="container">fact container</param>
        </member>
        <member name="M:FactFactory.FactFactoryBase`4.GetCopyContainer">
            <summary>
            Get copy container
            </summary>
            <returns></returns>
        </member>
        <member name="M:FactFactory.FactFactoryBase`4.TryDeriveTreesForWantAction(System.Collections.Generic.List{FactFactory.Entities.FactRuleTree}@,`3,`0,System.Collections.Generic.IReadOnlyCollection{FactFactory.Interfaces.IFactInfo},System.Collections.Generic.Dictionary{FactFactory.Interfaces.IFactInfo,System.Collections.Generic.List{System.Collections.Generic.List{FactFactory.Interfaces.IFactInfo}}}@)">
            <summary>
            We are trying to calculate a tree by which we find a fact
            </summary>
            <param name="treesResult">found trees</param>
            <param name="wantAction">desired action information</param>
            <param name="container">fact container</param>
            <param name="excludeFacts">facts that should not be calculated</param>
            <param name="notFoundFacts"></param>
            <returns></returns>
        </member>
        <member name="M:FactFactory.FactFactoryBase`4.GetFactRuleTrees(FactFactory.Interfaces.IFactInfo,System.Collections.Generic.IReadOnlyCollection{`1})">
            <summary>
            Returns trees. Their number is equal to the number of rules that can derive the necessary <paramref name="wantFact"/>.
            </summary>
            <param name="wantFact">derive fact</param>
            <param name="rules">rule set</param>
            <returns></returns>
        </member>
        <member name="M:FactFactory.FactFactoryBase`4.SyncComputedNodeForLevelTreeAndCheckGoneRoot(FactFactory.Entities.FactRuleTree,System.Int32,System.Collections.Generic.List{FactFactory.Entities.FactRuleNode})">
            <summary>
            Synchronizes the level of nodes. Searches for finished nodes and removes them from the level. 
            Returns the truth if, invoking itself, the method has passed the root of the tree
            </summary>
            <param name="factRuleTree"></param>
            <param name="level"></param>
            <param name="computedNodes"></param>
            <returns></returns>
        </member>
        <member name="T:FactFactory.FactFactoryBase`3">
            <summary>
            Base class for fact factory
            </summary>
        </member>
        <member name="M:FactFactory.FactFactoryBase`3.DeriveFact``1">
            <summary>
            Derive <typeparamref name="TFact"/>
            </summary>
            <typeparam name="TFact"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FactFactory.FactFactoryBase`3.WantFact``1(System.Action{``0})">
            <summary>
            Requesting desired facts through action
            </summary>
            <typeparam name="TFact"></typeparam>
            <param name="wantFactAction"></param>
        </member>
        <member name="M:FactFactory.FactFactoryBase`3.WantFact``2(System.Action{``0,``1})">
            <summary>
            Requesting desired facts through action
            </summary>
            <typeparam name="TFact1"></typeparam>
            <typeparam name="TFact2"></typeparam>
            <param name="wantFactAction"></param>
        </member>
        <member name="T:FactFactory.Facts.CurrentFactsFindingFact">
            <summary>
            Current fact finding information
            <para>
            Only available for request in the rules
            </para>
            </summary>
        </member>
        <member name="M:FactFactory.Facts.CurrentFactsFindingFact.#ctor(System.Collections.Generic.IReadOnlyCollection{FactFactory.Interfaces.IFactInfo})">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Facts.CurrentFactsFindingFact.GetFactInfo">
            <inheritdoc />
        </member>
        <member name="T:FactFactory.Facts.DateOfDeriveCurrentFact">
            <summary>
            Start date for deriving of current fact
            <para>
            Only available for request in the rules
            </para>
            </summary>
        </member>
        <member name="M:FactFactory.Facts.DateOfDeriveCurrentFact.#ctor(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Facts.DateOfDeriveCurrentFact.GetFactInfo">
            <inheritdoc />
        </member>
        <member name="T:FactFactory.Facts.DateOfDeriveFact">
            <summary>
            Start date for deriving of all facts
            </summary>
        </member>
        <member name="M:FactFactory.Facts.DateOfDeriveFact.#ctor(System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="fact"></param>
        </member>
        <member name="T:FactFactory.Facts.DerivingCurrentFactsFact">
            <summary>
            Current Calculated Facts
            </summary>
        </member>
        <member name="M:FactFactory.Facts.DerivingCurrentFactsFact.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{FactFactory.Interfaces.IFactInfo})">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Facts.DerivingCurrentFactsFact.GetFactInfo">
            <inheritdoc />
        </member>
        <member name="T:FactFactory.Facts.FactBase`1">
            <summary>
            Base class for fact
            </summary>
            <typeparam name="TFactValue">type fact</typeparam>
        </member>
        <member name="P:FactFactory.Facts.FactBase`1.Value">
            <summary>
            Value fact
            </summary>
        </member>
        <member name="M:FactFactory.Facts.FactBase`1.#ctor(`0)">
            <summary>
            Constructor
            </summary>
            <param name="fact"></param>
        </member>
        <member name="M:FactFactory.Facts.FactBase`1.GetFactInfo">
            <summary>
            Must return FactInfo{type of your fact}();
            </summary>
            <returns></returns>
        </member>
        <member name="T:FactFactory.Facts.NotContainedFact`1">
            <summary>
            Information about a fact that is not contained in the container at the time of the function call <see cref="M:FactFactory.Interfaces.IFactFactory`4.Derive"/>
            </summary>
        </member>
        <member name="P:FactFactory.Facts.NotContainedFact`1.Value">
            <inheritdoc />
        </member>
        <member name="M:FactFactory.Facts.NotContainedFact`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:FactFactory.Facts.NotContainedFact`1.GetFactInfoNotContained``1">
            <inheritdoc />
        </member>
        <member name="T:FactFactory.Facts.NotContainedFactBase">
            <summary>
            Information about a fact that is not contained in the container at the time of the function call <see cref="M:FactFactory.Interfaces.IFactFactory`4.Derive"/>
            </summary>
        </member>
        <member name="M:FactFactory.Facts.NotContainedFactBase.#ctor(FactFactory.Interfaces.IFactInfo)">
            <summary>
            Constructor
            </summary>
            <param name="fact"></param>
        </member>
        <member name="M:FactFactory.Facts.NotContainedFactBase.GetFactInfoNotContained``1">
            <summary>
            Return information about a fact not contained in the container
            </summary>
            <typeparam name="TFact"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FactFactory.Facts.NotContainedFactBase.IsFactContained``1(``0)">
            <summary>
            Is the fact contained in the container
            </summary>
            <typeparam name="TFactContainer"></typeparam>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:FactFactory.Facts.NotContainedFactBase.GetInstance``1">
            <summary>
            Get instace
            </summary>
            <typeparam name="TFact"></typeparam>
            <returns></returns>
        </member>
        <member name="T:FactFactory.Helpers.FactFactoryHelper">
            <summary>
            Helper for <see cref="T:FactFactory.FactFactoryBase`4"/>
            </summary>
        </member>
        <member name="M:FactFactory.Helpers.FactFactoryHelper.CreateException(System.String,System.String)">
            <summary>
            Create <see cref="T:FactFactory.Exceptions.FactFactoryException"/>
            </summary>
            <param name="code">error code</param>
            <param name="reason">error reason</param>
            <returns></returns>
        </member>
        <member name="M:FactFactory.Helpers.FactFactoryHelper.CreateDeriveException(System.String,System.String)">
            <summary>
            Create <see cref="T:FactFactory.Exceptions.InvalidDeriveOperationException"/>
            </summary>
            <param name="code"></param>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="T:FactFactory.Interfaces.IFact">
            <summary>
            Fact interface
            </summary>
        </member>
        <member name="M:FactFactory.Interfaces.IFact.GetFactInfo">
            <summary>
            Return fact information as an output parameter
            </summary>
            <returns></returns>
        </member>
        <member name="T:FactFactory.Interfaces.IFactContainer">
            <summary>
            Container interface with facts for deriving other facts
            </summary>
        </member>
        <member name="M:FactFactory.Interfaces.IFactContainer.Add``1(``0)">
            <summary>
            Add fact
            </summary>
            <typeparam name="TFact">type fact</typeparam>
            <param name="fact">fact</param>
        </member>
        <member name="M:FactFactory.Interfaces.IFactContainer.Remove``1">
            <summary>
            Remove fact
            </summary>
            <typeparam name="TFact">type fact</typeparam>
        </member>
        <member name="M:FactFactory.Interfaces.IFactContainer.TryGetFact``1(``0@)">
            <summary>
            Try get fact
            </summary>
            <typeparam name="TFact"></typeparam>
            <param name="fact"></param>
            <returns></returns>
        </member>
        <member name="M:FactFactory.Interfaces.IFactContainer.GetFact``1">
            <summary>
            Get fact
            </summary>
            <typeparam name="TFact"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FactFactory.Interfaces.IFactContainer.Contains``1">
            <summary>
            Is this type of fact contained
            </summary>
            <typeparam name="TFact"></typeparam>
            <returns></returns>
        </member>
        <member name="T:FactFactory.Interfaces.IFactFactory`4">
            <summary>
            Fact factory interface
            </summary>
        </member>
        <member name="P:FactFactory.Interfaces.IFactFactory`4.Container">
            <summary>
            Fact container
            </summary>
        </member>
        <member name="P:FactFactory.Interfaces.IFactFactory`4.Rules">
            <summary>
            Collection of rules for derive facts
            </summary>
        </member>
        <member name="M:FactFactory.Interfaces.IFactFactory`4.Derive">
            <summary>
            Derive the facts
            </summary>
        </member>
        <member name="M:FactFactory.Interfaces.IFactFactory`4.DeriveFact``1">
            <summary>
            Derive <typeparamref name="TFact"/>
            </summary>
            <typeparam name="TFact"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FactFactory.Interfaces.IFactFactory`4.WantFact(`3)">
            <summary>
            Requesting a desired fact through action
            </summary>
            <param name="wantAction"></param>
        </member>
        <member name="T:FactFactory.Interfaces.IFactInfo">
            <summary>
            Fact info
            </summary>
        </member>
        <member name="M:FactFactory.Interfaces.IFactInfo.Compare``1(``0)">
            <summary>
            Compare <see cref="T:FactFactory.Interfaces.IFactInfo"/>
            </summary>
            <param name="factInfo"></param>
        </member>
        <member name="P:FactFactory.Interfaces.IFactInfo.FactName">
            <summary>
            Fact name
            </summary>
        </member>
        <member name="M:FactFactory.Interfaces.IFactInfo.ContainsContainer``1(``0)">
            <summary>
            Is in the container
            </summary>
            <typeparam name="TFactContainer">type container</typeparam>
            <param name="container">container</param>
            <returns></returns>
        </member>
        <member name="M:FactFactory.Interfaces.IFactInfo.IsFactType``1">
            <summary>
            Is it possible to convert a fact type to a <typeparamref name="TFact"/>
            </summary>
            <typeparam name="TFact"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FactFactory.Interfaces.IFactInfo.GetNotContainedFact">
            <summary>
            Return fact. The current fact is not contained in the container.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FactFactory.Interfaces.IFactRule">
            <summary>
            Rule of fact derivation
            </summary>
        </member>
        <member name="P:FactFactory.Interfaces.IFactRule.InputFactInfos">
            <summary>
            Information on input factacles rules
            </summary>
        </member>
        <member name="P:FactFactory.Interfaces.IFactRule.OutputFactInfo">
            <summary>
            Rule exit information
            </summary>
        </member>
        <member name="M:FactFactory.Interfaces.IFactRule.CanDerive``1(``0)">
            <summary>
            is it possible to derive the fact
            </summary>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:FactFactory.Interfaces.IFactRule.Derive``1(``0)">
            <summary>
            Rule of fact derive
            </summary>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:FactFactory.Interfaces.IFactRule.Compare``1(``0)">
            <summary>
            Compare rules
            </summary>
            <typeparam name="TFactRule"></typeparam>
            <param name="factRule"></param>
            <returns></returns>
        </member>
        <member name="T:FactFactory.Interfaces.INotContainedFact">
            <summary>
            Information about a fact that is not contained in the container at the time of the function call <see cref="M:FactFactory.Interfaces.IFactFactory`4.Derive"/>
            </summary>
        </member>
        <member name="M:FactFactory.Interfaces.INotContainedFact.IsFactContained``1(``0)">
            <summary>
            Is the fact contained in the container
            </summary>
            <typeparam name="TFactContainer"></typeparam>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="T:FactFactory.Interfaces.IWantAction">
            <summary>
            Desired action information
            </summary>
        </member>
        <member name="P:FactFactory.Interfaces.IWantAction.InputFacts">
            <summary>
            Facts Required to Launch an Action
            </summary>
        </member>
        <member name="P:FactFactory.Interfaces.IWantAction.DateOfDerive">
            <summary>
            Start date for fact finding for action
            </summary>
        </member>
        <member name="M:FactFactory.Interfaces.IWantAction.Invoke``1(``0)">
            <summary>
            Run actioin
            </summary>
            <typeparam name="TFactContainer">container with <see cref="P:FactFactory.Interfaces.IWantAction.InputFacts"/></typeparam>
            <param name="container"></param>
        </member>
    </members>
</doc>
