<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FactFactory.Interfaces</name>
    </assembly>
    <members>
        <member name="T:GetcuReone.FactFactory.Interfaces.ICopy`1">
            <summary>
            Interface for copying objects.
            </summary>
            <typeparam name="TCopyObj">Type of object to copy.</typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.ICopy`1.Copy">
            <summary>
            Object copy method
            </summary>
            <returns>Copied object.</returns>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.IFact">
            <summary>
            Fact interface
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFact.GetFactType">
            <summary>
            Return fact information as an output parameter
            </summary>
            <returns></returns>
        </member>
        <member name="P:GetcuReone.FactFactory.Interfaces.IFact.CalculatedByRule">
            <summary>
            It was calculated using the rule.
            </summary>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.IFactContainer`1">
            <summary>
            Container interface with facts for deriving other facts.
            </summary>
            <typeparam name="TFactBase">The type from which all facts in this container should be inherited.</typeparam>
        </member>
        <member name="P:GetcuReone.FactFactory.Interfaces.IFactContainer`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:GetcuReone.FactFactory.Interfaces.IFactContainer`1"/> is read-only.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactContainer`1.Add``1(``0)">
            <summary>
            Add fact.
            </summary>
            <param name="fact">Fact.</param>
            <typeparam name="TFact">Type of fact to add.</typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactContainer`1.AddRange(System.Collections.Generic.IEnumerable{GetcuReone.FactFactory.Interfaces.IFact})">
            <summary>
            Add facts.
            </summary>
            <param name="facts">Fact set.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactContainer`1.Remove``1">
            <summary>
            Remove fact.
            </summary>
            <typeparam name="TFact">Type of fact to delete.</typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactContainer`1.Remove``1(``0)">
            <summary>
            Remove fact.
            </summary>
            <param name="fact"></param>
            <typeparam name="TFact">Type of fact to delete.</typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactContainer`1.TryGetFact``1(``0@)">
            <summary>
            Try get fact.
            </summary>
            <typeparam name="TFact">Type of fact to return.</typeparam>
            <param name="fact"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactContainer`1.GetFact``1">
            <summary>
            Get fact.
            </summary>
            <typeparam name="TFact">Type of fact to return.</typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactContainer`1.Contains``1">
            <summary>
            Is this type of fact contained.
            </summary>
            <typeparam name="TFact">type of fact to check for.</typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactContainer`1.Clear">
            <summary>
            Clear this container.
            </summary>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.IFactFactory`5">
            <summary>
            Fact factory interface.
            </summary>
            <typeparam name="TFactBase">All facts that the fact factory works with should be inherited from this type.</typeparam>
            <typeparam name="TFactContainer">Type fact container.</typeparam>
            <typeparam name="TFactRule">Type fact rule.</typeparam>
            <typeparam name="TFactRuleCollection">Type set rule.</typeparam>
            <typeparam name="TWantAction">Type 'want action'.</typeparam>
        </member>
        <member name="P:GetcuReone.FactFactory.Interfaces.IFactFactory`5.Container">
            <summary>
            Fact container.
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.Interfaces.IFactFactory`5.Rules">
            <summary>
            Collection of rules for derive facts.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactFactory`5.Derive">
            <summary>
            Derive the facts.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactFactory`5.DeriveFact``1">
            <summary>
            Derive <typeparamref name="TWantFact"/>.
            </summary>
            <typeparam name="TWantFact">Type of desired fact.</typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactFactory`5.WantFact(`4)">
            <summary>
            Requesting a desired fact through action.
            </summary>
            <param name="wantAction"></param>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactFactory`5.GetSingleEntityOperations">
            <summary>
            Get <see cref="T:GetcuReone.FactFactory.Interfaces.ISingleEntityOperations"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.IFactRule`1">
            <summary>
            Rule of fact calculation.
            </summary>
            <typeparam name="TFactBase">The type of fact from which the facts in the container should be inherited.</typeparam>
        </member>
        <member name="P:GetcuReone.FactFactory.Interfaces.IFactRule`1.OutputFactType">
            <summary>
            Information on output fact.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactRule`1.CanCalculate``2(``0,``1)">
            <summary>
            Is it possible to calculate the fact.
            </summary>
            <param name="container"></param>
            <param name="wantAction"></param>
            <typeparam name="TContainer"></typeparam>
            <typeparam name="TWantAction"></typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactRule`1.Calculate``2(``0,``1)">
            <summary>
            Rule of fact calculate.
            </summary>
            <param name="container"></param>
            <param name="wantAction"></param>
            <typeparam name="TContainer"></typeparam>
            <typeparam name="TWantAction"></typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactRule`1.GetNecessaryFactTypes``2(``0,``1)">
            <summary>
            Get the necessary fact types.
            </summary>
            <typeparam name="TWantAction"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="wantAction"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.IFactRuleCollection`2">
            <summary>
            Collection of rules.
            </summary>
            <typeparam name="TFactBase">Base fact type.</typeparam>
            <typeparam name="TFactRule">Rule type.</typeparam>
        </member>
        <member name="P:GetcuReone.FactFactory.Interfaces.IFactRuleCollection`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:GetcuReone.FactFactory.Interfaces.IFactRuleCollection`2"/> is read-only.
            </summary>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.IFactType">
            <summary>
            Fact type.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactType.EqualsFactType``1(``0)">
            <summary>
            <see cref="T:GetcuReone.FactFactory.Interfaces.IFactType"/> equality.
            </summary>
            <param name="factInfo"></param>
        </member>
        <member name="P:GetcuReone.FactFactory.Interfaces.IFactType.FactName">
            <summary>
            Fact name.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactType.IsFactType``1">
            <summary>
            Is it possible to convert a fact type to a <typeparamref name="TFact"/>.
            </summary>
            <typeparam name="TFact"></typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactType.CreateConditionFact``1">
            <summary>
            Create an fact of this type. Method created for condition facts.
            </summary>
            <typeparam name="TFact"></typeparam>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactType.GetFacts(System.Collections.Generic.IEnumerable{GetcuReone.FactFactory.Interfaces.IFact})">
            <summary>
            Returns a subarray whose facts have this <see cref="T:GetcuReone.FactFactory.Interfaces.IFactType"/>.
            </summary>
            <param name="facts"></param>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.IFactTypeCreation">
            <summary>
            Interface for creating a fact type.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactTypeCreation.GetFactType``1">
            <summary>
            Get fact type from <typeparamref name="TFact"/>.
            </summary>
            <typeparam name="TFact"></typeparam>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.IFactWork`1">
            <summary>
            Basic interface for objects that work directly with facts.
            </summary>
            <typeparam name="TFactBase"></typeparam>
        </member>
        <member name="P:GetcuReone.FactFactory.Interfaces.IFactWork`1.InputFactTypes">
            <summary>
            Information on input factacles rules.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactWork`1.EqualsWork``3(``0,``1,``2)">
            <summary>
            Work equality.
            </summary>
            <typeparam name="TFactWork"></typeparam>
            <typeparam name="TWantAction"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="workFact">Work with which equality is determined.</param>
            <param name="wantAction">The action in the context of which this occurs</param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IFactWork`1.СompatibilityWithRule``3(``0,``1,``2)">
            <summary>
            Is the <paramref name="factRule"/> rule compatible with the current <see cref="T:GetcuReone.FactFactory.Interfaces.IFactWork`1"/>.
            </summary>
            <typeparam name="TFactRule"></typeparam>
            <typeparam name="TWantAction"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="factRule">Compatibility check rule.</param>
            <param name="wantAction">The action within which compatibility check.</param>
            <param name="container">Container.</param>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.ISingleEntityOperations">
            <summary>
            Single operations on entities of the FactFactory.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.ISingleEntityOperations.ValidateAndGetCopyContainer``2(``1)">
            <summary>
            Validate and return a copy of the container.
            </summary>
            <typeparam name="TFactBase"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.ISingleEntityOperations.ValidateAndGetRules``3(``2)">
            <summary>
            Validate and return a copy of the rules.
            </summary>
            <typeparam name="TFactBase"></typeparam>
            <typeparam name="TFactRule"></typeparam>
            <typeparam name="TFactRuleCollection"></typeparam>
            <param name="ruleCollection"></param>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.IWantAction`1">
            <summary>
            Desired action information.
            </summary>
            <typeparam name="TFactBase"></typeparam>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IWantAction`1.Invoke``1(``0)">
            <summary>
            Run action.
            </summary>
            <typeparam name="TFactContainer">container with <see cref="P:GetcuReone.FactFactory.Interfaces.IFactWork`1.InputFactTypes"/>.</typeparam>
            <param name="container"></param>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.IWantAction`1.GetNecessaryFactTypes``1(``0)">
            <summary>
            Get the necessary fact types.
            </summary>
            <typeparam name="TFactContainer"></typeparam>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.SpecialFacts.ICanDerivedFact">
            <summary>
            Interface for fact that can be derived.
            </summary>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.SpecialFacts.ICannotDerivedFact">
            <summary>
            Interface for fact that cannot be derived.
            </summary>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.SpecialFacts.IConditionFact">
            <summary>
            A special fact that is created using a factory when building a tree or calculating facts.
            </summary>
        </member>
        <member name="P:GetcuReone.FactFactory.Interfaces.SpecialFacts.IConditionFact.FactType">
            <summary>
            Information about the type of fact the current runtime fact is working with.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.SpecialFacts.IConditionFact.Condition``4(``1,``2,``3)">
            <summary>
            A condition that determines whether the current fact can be added to the container when deriving.
            </summary>
            <typeparam name="TFactBase"></typeparam>
            <typeparam name="TFactWork"></typeparam>
            <typeparam name="TWantAction"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="factWork">Work for which we learn about the possibility of using the fact.</param>
            <param name="wantAction">The action in the context of which we do this.</param>
            <param name="container">Container.</param>
            <returns></returns>
            <remarks>
            Using it, you can determine which rule and under what conditions can be used to build a rule tree.
            </remarks>
        </member>
        <member name="T:GetcuReone.FactFactory.Interfaces.SpecialFacts.ISpecialFact">
            <summary>
            Basic interface for special facts.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Interfaces.SpecialFacts.ISpecialFact.IsFactContained``4(``1,``2,``3)">
            <summary>
            Is the fact contained in the container.
            </summary>
            <typeparam name="TFactBase"></typeparam>
            <typeparam name="TFactWork"></typeparam>
            <typeparam name="TWantAction"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="factWork">Work for which we learn about the possibility of using the fact.</param>
            <param name="wantAction">The action in the context of which we do this.</param>
            <param name="container">Container.</param>
            <returns></returns>
        </member>
    </members>
</doc>
