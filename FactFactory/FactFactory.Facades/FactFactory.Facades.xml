<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FactFactory.Facades</name>
    </assembly>
    <members>
        <member name="T:GetcuReone.FactFactory.Facades.EntitiesOperations.EntitiesOperationsFacade">
            <summary>
            Facade for entities.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Facades.EntitiesOperations.EntitiesOperationsFacade.GetValidContainer``2(``1)">
            <summary>
            Get valid container.
            </summary>
            <typeparam name="TFactBase"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Facades.EntitiesOperations.EntitiesOperationsFacade.GetValidRules``3(``2)">
            <summary>
            Get valid rules.
            </summary>
            <typeparam name="TFactBase"></typeparam>
            <typeparam name="TFactRule"></typeparam>
            <typeparam name="TFactRuleCollection"></typeparam>
            <param name="ruleCollection"></param>
            <returns></returns>
        </member>
        <member name="T:GetcuReone.FactFactory.Facades.TreesOperations.TreesOperationsFacade">
            <summary>
            Facade for trees operations.
            </summary>
        </member>
        <member name="M:GetcuReone.FactFactory.Facades.TreesOperations.TreesOperationsFacade.GetTreesByBuildTreeRequest``4(GetcuReone.FactFactory.Entities.Trees.BuildTreeForFactTypeRequest{``0,``1,``2,``3})">
            <summary>
            Get <see cref="!:TreeByFactRule&lt;TFactBase, TFactRule&gt;"/> by <paramref name="request"/>.
            </summary>
            <typeparam name="TFactBase"></typeparam>
            <typeparam name="TFactRule"></typeparam>
            <typeparam name="TWantAction"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Facades.TreesOperations.TreesOperationsFacade.SyncTreeLevelAndFinishedNodes``4(System.Collections.Generic.List{GetcuReone.FactFactory.Entities.Trees.NodeByFactRule{``0,``1}},System.Collections.Generic.Dictionary{GetcuReone.FactFactory.Entities.Trees.NodeInfoByFactRyle{``0,``1},GetcuReone.FactFactory.Entities.Trees.NodeByFactRule{``0,``1}},``2,``3)">
            <summary>
            Synchronize the tree level with years ready for calculation.
            </summary>
            <typeparam name="TFactBase"></typeparam>
            <typeparam name="TFactRule"></typeparam>
            <typeparam name="TWantAction"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="treeLevel">Tree level.</param>
            <param name="finishedNodes">Nodes by which the rule can already be calculated. Key - node info, value - node</param>
            <param name="wantAction">Action within which synchronization occurs.</param>
            <param name="container">Fact container.</param>
        </member>
        <member name="M:GetcuReone.FactFactory.Facades.TreesOperations.TreesOperationsFacade.TrySyncTreeLevelsAndFinishedNodes``4(GetcuReone.FactFactory.Entities.Trees.TreeByFactRule{``0,``1,``2,``3},System.Int32,System.Collections.Generic.Dictionary{GetcuReone.FactFactory.Entities.Trees.NodeInfoByFactRyle{``0,``1},GetcuReone.FactFactory.Entities.Trees.NodeByFactRule{``0,``1}})">
            <summary>
            Synchronize tree levels with years ready for calculation.
            </summary>
            <typeparam name="TFactBase"></typeparam>
            <typeparam name="TFactRule"></typeparam>
            <typeparam name="TWantAction"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="treeByFactRule">Tree whose levels you want to synchronize.</param>
            <param name="level">The level at which to start synchronization.</param>
            <param name="finishedNodes"></param>
            <returns>True - managed to sync root level</returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Facades.TreesOperations.TreesOperationsFacade.RuleContainBranch``2(GetcuReone.FactFactory.Entities.Trees.NodeByFactRule{``0,``1},``1)">
            <summary>
            Whether the <paramref name="rule"/> is contained in a branch with <paramref name="node"/>.
            </summary>
            <typeparam name="TFactBase"></typeparam>
            <typeparam name="TFactRule"></typeparam>
            <param name="node"></param>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Facades.TreesOperations.TreesOperationsFacade.GetNodesByRules``4(System.Collections.Generic.List{``1},GetcuReone.FactFactory.Entities.Trees.TreeByFactRule{``0,``1,``2,``3},GetcuReone.FactFactory.Entities.Trees.NodeByFactRule{``0,``1},System.Collections.Generic.List{``1})">
            <summary>
            Get nodes by rules.
            </summary>
            <typeparam name="TFactBase"></typeparam>
            <typeparam name="TFactRule"></typeparam>
            <typeparam name="TWantAction"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="rules"></param>
            <param name="treeByFactRule"></param>
            <param name="parentNode"></param>
            <param name="allRulesForWantAction"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Facades.TreesOperations.TreesOperationsFacade.TryRemoveRootNode``4(GetcuReone.FactFactory.Entities.Trees.NodeByFactRule{``0,``1},GetcuReone.FactFactory.Entities.Trees.TreeByFactRule{``0,``1,``2,``3},System.Int32)">
            <summary>
            Delete current node. Recursively delete parent nodes if they do not have other nodes calculating the fact from the child node.
            </summary>
            <typeparam name="TFactBase"></typeparam>
            <typeparam name="TFactRule"></typeparam>
            <typeparam name="TWantAction"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="node"></param>
            <param name="treeByFactRule"></param>
            <param name="level"></param>
            <returns>True - remove root node.</returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Facades.TreesOperations.TreesOperationsFacade.GetUniqueRulesFromTree``4(GetcuReone.FactFactory.Entities.Trees.TreeByFactRule{``0,``1,``2,``3})">
            <summary>
            Get unique rules from tree.
            </summary>
            <typeparam name="TFactBase"></typeparam>
            <typeparam name="TFactRule"></typeparam>
            <typeparam name="TWantAction"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="treeByFactRule"></param>
            <returns></returns>
        </member>
        <member name="M:GetcuReone.FactFactory.Facades.TreesOperations.TreesOperationsFacade.GetIndependentRulesGroups``4(GetcuReone.FactFactory.Entities.Trees.TreeByFactRule{``0,``1,``2,``3})">
            <summary>
            Get independent rule groups.
            </summary>
            <typeparam name="TFactBase"></typeparam>
            <typeparam name="TFactRule"></typeparam>
            <typeparam name="TWantAction"></typeparam>
            <typeparam name="TFactContainer"></typeparam>
            <param name="treeByFactRule"></param>
        </member>
    </members>
</doc>
